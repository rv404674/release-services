{
"abspath": "dom/security/nsContentSecurityManager.cpp",
"node": "3ecc48155838ca413a56920d801a8be0719e9981",
"author": "ffxbld",
"date": [1523133795.0, 25200],
"desc": "No bug, Automated HPKP preload list update from host bld-linux64-spot-303 - a=hpkp-update",
"parents": ["b2c0699b9bd405300986bc26f256e8bb9c0c53a7"],
"children": ["70ab5d0f6da37783913e39857edf488ccfc2ab7b"],
"permissions": "",
"annotate": [{
"node": "8e2976d8a5e1c776e94774b4cc09087940bd8166",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1412125, part 1 - Manually add mode lines and MPL to files that were missing them entirely. r=qdot\n\nThese were detected by the script used to generate part 2.\n\nMozReview-Commit-ID: VMcT154f6f",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 1,
"line": "/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n",
"lineno": 1,
"revdate": [1509054899.0, 25200]
}, {
"node": "8e2976d8a5e1c776e94774b4cc09087940bd8166",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1412125, part 1 - Manually add mode lines and MPL to files that were missing them entirely. r=qdot\n\nThese were detected by the script used to generate part 2.\n\nMozReview-Commit-ID: VMcT154f6f",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 2,
"line": "/* vim: set ts=8 sts=2 et sw=2 tw=80: */\n",
"lineno": 2,
"revdate": [1509054899.0, 25200]
}, {
"node": "8e2976d8a5e1c776e94774b4cc09087940bd8166",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1412125, part 1 - Manually add mode lines and MPL to files that were missing them entirely. r=qdot\n\nThese were detected by the script used to generate part 2.\n\nMozReview-Commit-ID: VMcT154f6f",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 3,
"line": "/* This Source Code Form is subject to the terms of the Mozilla Public\n",
"lineno": 3,
"revdate": [1509054899.0, 25200]
}, {
"node": "8e2976d8a5e1c776e94774b4cc09087940bd8166",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1412125, part 1 - Manually add mode lines and MPL to files that were missing them entirely. r=qdot\n\nThese were detected by the script used to generate part 2.\n\nMozReview-Commit-ID: VMcT154f6f",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 4,
"line": " * License, v. 2.0. If a copy of the MPL was not distributed with this\n",
"lineno": 4,
"revdate": [1509054899.0, 25200]
}, {
"node": "8e2976d8a5e1c776e94774b4cc09087940bd8166",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1412125, part 1 - Manually add mode lines and MPL to files that were missing them entirely. r=qdot\n\nThese were detected by the script used to generate part 2.\n\nMozReview-Commit-ID: VMcT154f6f",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 5,
"line": " * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n",
"lineno": 5,
"revdate": [1509054899.0, 25200]
}, {
"node": "8e2976d8a5e1c776e94774b4cc09087940bd8166",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1412125, part 1 - Manually add mode lines and MPL to files that were missing them entirely. r=qdot\n\nThese were detected by the script used to generate part 2.\n\nMozReview-Commit-ID: VMcT154f6f",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 6,
"line": "\n",
"lineno": 6,
"revdate": [1509054899.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 1,
"line": "#include \"nsContentSecurityManager.h\"\n",
"lineno": 7,
"revdate": [1437358331.0, 25200]
}, {
"node": "ba39904a38ebdde78a04b792172254c3ddb1dd1b",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398691 - Unescape data: URI for console message when blocking toplevel data: URI navigations. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 2,
"line": "#include \"nsEscape.h\"\n",
"lineno": 8,
"revdate": [1505192798.0, -7200]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 9,
"line": "#include \"nsDataHandler.h\"\n",
"lineno": 9,
"revdate": [1510604702.0, -3600]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 2,
"line": "#include \"nsIChannel.h\"\n",
"lineno": 10,
"revdate": [1437358331.0, 25200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 3,
"line": "#include \"nsIHttpChannelInternal.h\"\n",
"lineno": 11,
"revdate": [1463479451.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 12,
"line": "#include \"nsINode.h\"\n",
"lineno": 12,
"revdate": [1517285453.0, 18000]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 3,
"line": "#include \"nsIStreamListener.h\"\n",
"lineno": 13,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 4,
"line": "#include \"nsILoadInfo.h\"\n",
"lineno": 14,
"revdate": [1437358331.0, 25200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 6,
"line": "#include \"nsIOService.h\"\n",
"lineno": 15,
"revdate": [1504683190.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 5,
"line": "#include \"nsContentUtils.h\"\n",
"lineno": 16,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 6,
"line": "#include \"nsCORSListenerProxy.h\"\n",
"lineno": 17,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 7,
"line": "#include \"nsIStreamListener.h\"\n",
"lineno": 18,
"revdate": [1437358331.0, 25200]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 11,
"line": "#include \"nsCDefaultURIFixup.h\"\n",
"lineno": 19,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 12,
"line": "#include \"nsIURIFixup.h\"\n",
"lineno": 20,
"revdate": [1483473570.0, -3600]
}, {
"node": "8feacdbd43fa5756246fa62f9b27c36727a53ce6",
"author": "Yoshi Huang \u003callstars.chh@mozilla.com\u003e",
"desc": "Bug 1267075 - Part 1: call SetBlockedRequest when CSP check failed. r=bz\n\nAs a follow-up from bug 1206961, we will remove calling CanLoadImage in\nthis bug. Also in the case of CSP check failed, we will call\nSetBlockedRequest in those cases.\n\nSee https://bugzilla.mozilla.org/show_bug.cgi?id=1267075#c30 for the\nanalysis between the old and new setup.\n",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 13,
"line": "#include \"nsIImageLoadingContent.h\"\n",
"lineno": 21,
"revdate": [1486093747.0, -28800]
}, {
"node": "8feacdbd43fa5756246fa62f9b27c36727a53ce6",
"author": "Yoshi Huang \u003callstars.chh@mozilla.com\u003e",
"desc": "Bug 1267075 - Part 1: call SetBlockedRequest when CSP check failed. r=bz\n\nAs a follow-up from bug 1206961, we will remove calling CanLoadImage in\nthis bug. Also in the case of CSP check failed, we will call\nSetBlockedRequest in those cases.\n\nSee https://bugzilla.mozilla.org/show_bug.cgi?id=1267075#c30 for the\nanalysis between the old and new setup.\n",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 14,
"line": "\n",
"lineno": 22,
"revdate": [1486093747.0, -28800]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 9,
"line": "#include \"mozilla/dom/Element.h\"\n",
"lineno": 23,
"revdate": [1437358331.0, 25200]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 24,
"line": "#include \"mozilla/dom/nsMixedContentBlocker.h\"\n",
"lineno": 24,
"revdate": [1519893870.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 24,
"line": "#include \"mozilla/dom/TabChild.h\"\n",
"lineno": 25,
"revdate": [1509711791.0, -3600]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 10,
"line": "\n",
"lineno": 26,
"revdate": [1437358331.0, 25200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 11,
"line": "NS_IMPL_ISUPPORTS(nsContentSecurityManager,\n",
"lineno": 27,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 12,
"line": "                  nsIContentSecurityManager,\n",
"lineno": 28,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 13,
"line": "                  nsIChannelEventSink)\n",
"lineno": 29,
"revdate": [1449444794.0, 18000]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 12,
"line": "\n",
"lineno": 30,
"revdate": [1442593635.0, 25200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 23,
"line": "/* static */ bool\n",
"lineno": 31,
"revdate": [1504683190.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 31,
"line": "nsContentSecurityManager::AllowTopLevelNavigationToDataURI(nsIChannel* aChannel)\n",
"lineno": 32,
"revdate": [1509711791.0, -3600]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 29,
"line": "{\n",
"lineno": 33,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 30,
"line": "  // Let's block all toplevel document navigations to a data: URI.\n",
"lineno": 34,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 31,
"line": "  // In all cases where the toplevel document is navigated to a\n",
"lineno": 35,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 32,
"line": "  // data: URI the triggeringPrincipal is a codeBasePrincipal, or\n",
"lineno": 36,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 33,
"line": "  // a NullPrincipal. In other cases, e.g. typing a data: URL into\n",
"lineno": 37,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 34,
"line": "  // the URL-Bar, the triggeringPrincipal is a SystemPrincipal;\n",
"lineno": 38,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 35,
"line": "  // we don't want to block those loads. Only exception, loads coming\n",
"lineno": 39,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 36,
"line": "  // from an external applicaton (e.g. Thunderbird) don't load\n",
"lineno": 40,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 37,
"line": "  // using a codeBasePrincipal, but we want to block those loads.\n",
"lineno": 41,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 38,
"line": "  if (!mozilla::net::nsIOService::BlockToplevelDataUriNavigations()) {\n",
"lineno": 42,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 39,
"line": "    return true;\n",
"lineno": 43,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 40,
"line": "  }\n",
"lineno": 44,
"revdate": [1504683190.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 44,
"line": "  nsCOMPtr\u003cnsILoadInfo\u003e loadInfo = aChannel-\u003eGetLoadInfo();\n",
"lineno": 45,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 45,
"line": "  if (!loadInfo) {\n",
"lineno": 46,
"revdate": [1509711791.0, -3600]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 42,
"line": "    return true;\n",
"lineno": 47,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 43,
"line": "  }\n",
"lineno": 48,
"revdate": [1504683190.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 48,
"line": "  if (loadInfo-\u003eGetExternalContentPolicyType() != nsIContentPolicy::TYPE_DOCUMENT) {\n",
"lineno": 49,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 49,
"line": "    return true;\n",
"lineno": 50,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 50,
"line": "  }\n",
"lineno": 51,
"revdate": [1509711791.0, -3600]
}, {
"node": "69e828da2238c01a3ab7c449d8c13b23792a7555",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1407891: Allow view-image to open a data: URI by setting a flag on the loadinfo. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 51,
"line": "  if (loadInfo-\u003eGetForceAllowDataURI()) {\n",
"lineno": 52,
"revdate": [1510167701.0, -3600]
}, {
"node": "69e828da2238c01a3ab7c449d8c13b23792a7555",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1407891: Allow view-image to open a data: URI by setting a flag on the loadinfo. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 52,
"line": "    // if the loadinfo explicitly allows the data URI navigation, let's allow it now\n",
"lineno": 53,
"revdate": [1510167701.0, -3600]
}, {
"node": "69e828da2238c01a3ab7c449d8c13b23792a7555",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1407891: Allow view-image to open a data: URI by setting a flag on the loadinfo. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 53,
"line": "    return true;\n",
"lineno": 54,
"revdate": [1510167701.0, -3600]
}, {
"node": "69e828da2238c01a3ab7c449d8c13b23792a7555",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1407891: Allow view-image to open a data: URI by setting a flag on the loadinfo. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 54,
"line": "  }\n",
"lineno": 55,
"revdate": [1510167701.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 51,
"line": "  nsCOMPtr\u003cnsIURI\u003e uri;\n",
"lineno": 56,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 52,
"line": "  nsresult rv = NS_GetFinalChannelURI(aChannel, getter_AddRefs(uri));\n",
"lineno": 57,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 53,
"line": "  NS_ENSURE_SUCCESS(rv, true);\n",
"lineno": 58,
"revdate": [1509711791.0, -3600]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 44,
"line": "  bool isDataURI =\n",
"lineno": 59,
"revdate": [1504683190.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 55,
"line": "    (NS_SUCCEEDED(uri-\u003eSchemeIs(\"data\", &isDataURI)) && isDataURI);\n",
"lineno": 60,
"revdate": [1509711791.0, -3600]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 46,
"line": "  if (!isDataURI) {\n",
"lineno": 61,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 47,
"line": "    return true;\n",
"lineno": 62,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 48,
"line": "  }\n",
"lineno": 63,
"revdate": [1504683190.0, -7200]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 64,
"line": "\n",
"lineno": 64,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 65,
"line": "  nsAutoCString spec;\n",
"lineno": 65,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 66,
"line": "  rv = uri-\u003eGetSpec(spec);\n",
"lineno": 66,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 67,
"line": "  NS_ENSURE_SUCCESS(rv, true);\n",
"lineno": 67,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 68,
"line": "  nsAutoCString contentType;\n",
"lineno": 68,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 69,
"line": "  bool base64;\n",
"lineno": 69,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 70,
"line": "  rv = nsDataHandler::ParseURI(spec, contentType, nullptr, \n",
"lineno": 70,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 71,
"line": "                               base64, nullptr);\n",
"lineno": 71,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 72,
"line": "  NS_ENSURE_SUCCESS(rv, true);\n",
"lineno": 72,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 73,
"line": "\n",
"lineno": 73,
"revdate": [1510604702.0, -3600]
}, {
"node": "ff412c116b9baabf094ab4e97065d5d7dedf921f",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1396798: Do not block toplevel data: navigation to image (except svgs). r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 49,
"line": "  // Whitelist data: images as long as they are not SVGs\n",
"lineno": 74,
"revdate": [1504708025.0, -7200]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 75,
"line": "  if (StringBeginsWith(contentType, NS_LITERAL_CSTRING(\"image/\")) &&\n",
"lineno": 75,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 76,
"line": "      !contentType.EqualsLiteral(\"image/svg+xml\")) {\n",
"lineno": 76,
"revdate": [1510604702.0, -3600]
}, {
"node": "ff412c116b9baabf094ab4e97065d5d7dedf921f",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1396798: Do not block toplevel data: navigation to image (except svgs). r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 54,
"line": "    return true;\n",
"lineno": 77,
"revdate": [1504708025.0, -7200]
}, {
"node": "ff412c116b9baabf094ab4e97065d5d7dedf921f",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1396798: Do not block toplevel data: navigation to image (except svgs). r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 55,
"line": "  }\n",
"lineno": 78,
"revdate": [1504708025.0, -7200]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 79,
"line": "  // Whitelist all plain text types as well as data: PDFs.\n",
"lineno": 79,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 80,
"line": "  if (nsContentUtils::IsPlainTextType(contentType) ||\n",
"lineno": 80,
"revdate": [1510604702.0, -3600]
}, {
"node": "4017a9d65a94457f05df28569d9ac69439dcd566",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1415612: Allow all plain text types when navigating top-level data URIs. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 81,
"line": "      contentType.EqualsLiteral(\"application/pdf\")) {\n",
"lineno": 81,
"revdate": [1510604702.0, -3600]
}, {
"node": "0b67372c4de0f5087149897d4829bc5d5c86fc26",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398692: Allow toplevel navigation to a data:application/pdf. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 59,
"line": "    return true;\n",
"lineno": 82,
"revdate": [1505367281.0, -7200]
}, {
"node": "0b67372c4de0f5087149897d4829bc5d5c86fc26",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398692: Allow toplevel navigation to a data:application/pdf. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 60,
"line": "  }\n",
"lineno": 83,
"revdate": [1505367281.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 70,
"line": "  // Redirecting to a toplevel data: URI is not allowed, hence we make\n",
"lineno": 84,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 71,
"line": "  // sure the RedirectChain is empty.\n",
"lineno": 85,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 72,
"line": "  if (!loadInfo-\u003eGetLoadTriggeredFromExternal() &&\n",
"lineno": 86,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 73,
"line": "      nsContentUtils::IsSystemPrincipal(loadInfo-\u003eTriggeringPrincipal()) &&\n",
"lineno": 87,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 74,
"line": "      loadInfo-\u003eRedirectChain().IsEmpty()) {\n",
"lineno": 88,
"revdate": [1509711791.0, -3600]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 51,
"line": "    return true;\n",
"lineno": 89,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 52,
"line": "  }\n",
"lineno": 90,
"revdate": [1504683190.0, -7200]
}, {
"node": "ba39904a38ebdde78a04b792172254c3ddb1dd1b",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398691 - Unescape data: URI for console message when blocking toplevel data: URI navigations. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 61,
"line": "  nsAutoCString dataSpec;\n",
"lineno": 91,
"revdate": [1505192798.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 78,
"line": "  uri-\u003eGetSpec(dataSpec);\n",
"lineno": 92,
"revdate": [1509711791.0, -3600]
}, {
"node": "ba39904a38ebdde78a04b792172254c3ddb1dd1b",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398691 - Unescape data: URI for console message when blocking toplevel data: URI navigations. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 63,
"line": "  if (dataSpec.Length() \u003e 50) {\n",
"lineno": 93,
"revdate": [1505192798.0, -7200]
}, {
"node": "ba39904a38ebdde78a04b792172254c3ddb1dd1b",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398691 - Unescape data: URI for console message when blocking toplevel data: URI navigations. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 64,
"line": "    dataSpec.Truncate(50);\n",
"lineno": 94,
"revdate": [1505192798.0, -7200]
}, {
"node": "ba39904a38ebdde78a04b792172254c3ddb1dd1b",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398691 - Unescape data: URI for console message when blocking toplevel data: URI navigations. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 65,
"line": "    dataSpec.AppendLiteral(\"...\");\n",
"lineno": 95,
"revdate": [1505192798.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 60,
"line": "  }\n",
"lineno": 96,
"revdate": [1504683190.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 83,
"line": "  nsCOMPtr\u003cnsITabChild\u003e tabChild = do_QueryInterface(loadInfo-\u003eContextForTopLevelLoad());\n",
"lineno": 97,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 84,
"line": "  nsCOMPtr\u003cnsIDocument\u003e doc;\n",
"lineno": 98,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 85,
"line": "  if (tabChild) {\n",
"lineno": 99,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 86,
"line": "    doc = static_cast\u003cmozilla::dom::TabChild*\u003e(tabChild.get())-\u003eGetDocument();\n",
"lineno": 100,
"revdate": [1509711791.0, -3600]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 87,
"line": "  }\n",
"lineno": 101,
"revdate": [1509711791.0, -3600]
}, {
"node": "ba39904a38ebdde78a04b792172254c3ddb1dd1b",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1398691 - Unescape data: URI for console message when blocking toplevel data: URI navigations. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 67,
"line": "  NS_ConvertUTF8toUTF16 specUTF16(NS_UnescapeURL(dataSpec));\n",
"lineno": 102,
"revdate": [1505192798.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 61,
"line": "  const char16_t* params[] = { specUTF16.get() };\n",
"lineno": 103,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 62,
"line": "  nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,\n",
"lineno": 104,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 63,
"line": "                                  NS_LITERAL_CSTRING(\"DATA_URI_BLOCKED\"),\n",
"lineno": 105,
"revdate": [1504683190.0, -7200]
}, {
"node": "0c4ecb84046395afd7c5ed4a250b64991c9b0da7",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1403814 - Block toplevel data: URI navigations only if openend in the browser. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 92,
"line": "                                  doc,\n",
"lineno": 106,
"revdate": [1509711791.0, -3600]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 66,
"line": "                                  nsContentUtils::eSECURITY_PROPERTIES,\n",
"lineno": 107,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 67,
"line": "                                  \"BlockTopLevelDataURINavigation\",\n",
"lineno": 108,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 68,
"line": "                                  params, ArrayLength(params));\n",
"lineno": 109,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 69,
"line": "  return false;\n",
"lineno": 110,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 70,
"line": "}\n",
"lineno": 111,
"revdate": [1504683190.0, -7200]
}, {
"node": "bb932a1656cd4f8850457d85f4916030afbdcdc8",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1394554: Block toplevel data: URI navigations after redirect. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 71,
"line": "\n",
"lineno": 112,
"revdate": [1504683190.0, -7200]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 112,
"line": "/* static */ bool\n",
"lineno": 113,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 113,
"line": "nsContentSecurityManager::AllowInsecureRedirectToDataURI(nsIChannel* aNewChannel)\n",
"lineno": 114,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 114,
"line": "{\n",
"lineno": 115,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 115,
"line": "  nsCOMPtr\u003cnsILoadInfo\u003e loadInfo = aNewChannel-\u003eGetLoadInfo();\n",
"lineno": 116,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 116,
"line": "  if (!loadInfo) {\n",
"lineno": 117,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 117,
"line": "    return true;\n",
"lineno": 118,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 118,
"line": "  }\n",
"lineno": 119,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 119,
"line": "  if (loadInfo-\u003eGetExternalContentPolicyType() != nsIContentPolicy::TYPE_SCRIPT) {\n",
"lineno": 120,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 120,
"line": "    return true;\n",
"lineno": 121,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 121,
"line": "  }\n",
"lineno": 122,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 122,
"line": "  nsCOMPtr\u003cnsIURI\u003e newURI;\n",
"lineno": 123,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 123,
"line": "  nsresult rv = NS_GetFinalChannelURI(aNewChannel, getter_AddRefs(newURI));\n",
"lineno": 124,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 124,
"line": "  if (NS_FAILED(rv) || !newURI) {\n",
"lineno": 125,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 125,
"line": "    return true;\n",
"lineno": 126,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 126,
"line": "  }\n",
"lineno": 127,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 127,
"line": "  bool isDataURI = (NS_SUCCEEDED(newURI-\u003eSchemeIs(\"data\", &isDataURI)) && isDataURI);\n",
"lineno": 128,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 128,
"line": "  if (!isDataURI) {\n",
"lineno": 129,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 129,
"line": "    return true;\n",
"lineno": 130,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 130,
"line": "  }\n",
"lineno": 131,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 131,
"line": "\n",
"lineno": 132,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 132,
"line": "  // Web Extensions are exempt from that restriction and are allowed to redirect\n",
"lineno": 133,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 133,
"line": "  // a channel to a data: URI. When a web extension redirects a channel, we set\n",
"lineno": 134,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 134,
"line": "  // a flag on the loadInfo which allows us to identify such redirects here.\n",
"lineno": 135,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 135,
"line": "  if (loadInfo-\u003eGetAllowInsecureRedirectToDataURI()) {\n",
"lineno": 136,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 136,
"line": "    return true;\n",
"lineno": 137,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 137,
"line": "  }\n",
"lineno": 138,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 138,
"line": "\n",
"lineno": 139,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 139,
"line": "  nsAutoCString dataSpec;\n",
"lineno": 140,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 140,
"line": "  newURI-\u003eGetSpec(dataSpec);\n",
"lineno": 141,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 141,
"line": "  if (dataSpec.Length() \u003e 50) {\n",
"lineno": 142,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 142,
"line": "    dataSpec.Truncate(50);\n",
"lineno": 143,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 143,
"line": "    dataSpec.AppendLiteral(\"...\");\n",
"lineno": 144,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 144,
"line": "  }\n",
"lineno": 145,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 145,
"line": "  nsCOMPtr\u003cnsIDocument\u003e doc;\n",
"lineno": 146,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 146,
"line": "  nsINode* node = loadInfo-\u003eLoadingNode();\n",
"lineno": 147,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 147,
"line": "  if (node) {\n",
"lineno": 148,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 148,
"line": "    doc = node-\u003eOwnerDoc();\n",
"lineno": 149,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "  }\n",
"lineno": 150,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 150,
"line": "  NS_ConvertUTF8toUTF16 specUTF16(NS_UnescapeURL(dataSpec));\n",
"lineno": 151,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 151,
"line": "  const char16_t* params[] = { specUTF16.get() };\n",
"lineno": 152,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 152,
"line": "  nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,\n",
"lineno": 153,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 153,
"line": "                                  NS_LITERAL_CSTRING(\"DATA_URI_BLOCKED\"),\n",
"lineno": 154,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 154,
"line": "                                  doc,\n",
"lineno": 155,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 155,
"line": "                                  nsContentUtils::eSECURITY_PROPERTIES,\n",
"lineno": 156,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 156,
"line": "                                  \"BlockSubresourceRedirectToData\",\n",
"lineno": 157,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 157,
"line": "                                  params, ArrayLength(params));\n",
"lineno": 158,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 158,
"line": "  return false;\n",
"lineno": 159,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 159,
"line": "}\n",
"lineno": 160,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 160,
"line": "\n",
"lineno": 161,
"revdate": [1518979972.0, -3600]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 162,
"line": "/* static */ nsresult\n",
"lineno": 162,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 163,
"line": "nsContentSecurityManager::CheckFTPSubresourceLoad(nsIChannel* aChannel)\n",
"lineno": 163,
"revdate": [1522967222.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 164,
"line": "{\n",
"lineno": 164,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 165,
"line": "  // We dissallow using FTP resources as a subresource everywhere.\n",
"lineno": 165,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 166,
"line": "  // The only valid way to use FTP resources is loading it as\n",
"lineno": 166,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 167,
"line": "  // a top level document.\n",
"lineno": 167,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 168,
"line": "\n",
"lineno": 168,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 169,
"line": "  nsCOMPtr\u003cnsILoadInfo\u003e loadInfo = aChannel-\u003eGetLoadInfo();\n",
"lineno": 169,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 170,
"line": "  if (!loadInfo) {\n",
"lineno": 170,
"revdate": [1522091108.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 171,
"line": "    return NS_OK;\n",
"lineno": 171,
"revdate": [1522967222.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 172,
"line": "  }\n",
"lineno": 172,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 173,
"line": "\n",
"lineno": 173,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 174,
"line": "  nsContentPolicyType type = loadInfo-\u003eGetExternalContentPolicyType();\n",
"lineno": 174,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 175,
"line": "  if (type == nsIContentPolicy::TYPE_DOCUMENT) {\n",
"lineno": 175,
"revdate": [1522091108.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 176,
"line": "    return NS_OK;\n",
"lineno": 176,
"revdate": [1522967222.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 177,
"line": "  }\n",
"lineno": 177,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 178,
"line": "\n",
"lineno": 178,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 179,
"line": "  nsCOMPtr\u003cnsIURI\u003e uri;\n",
"lineno": 179,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 180,
"line": "  nsresult rv = NS_GetFinalChannelURI(aChannel, getter_AddRefs(uri));\n",
"lineno": 180,
"revdate": [1522091108.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 181,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 181,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 182,
"line": "  if (!uri) {\n",
"lineno": 182,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 183,
"line": "    return NS_OK;\n",
"lineno": 183,
"revdate": [1522967222.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 183,
"line": "  }\n",
"lineno": 184,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 184,
"line": "\n",
"lineno": 185,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 185,
"line": "  bool isFtpURI = (NS_SUCCEEDED(uri-\u003eSchemeIs(\"ftp\", &isFtpURI)) && isFtpURI);\n",
"lineno": 186,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 186,
"line": "  if (!isFtpURI) {\n",
"lineno": 187,
"revdate": [1522091108.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 188,
"line": "    return NS_OK;\n",
"lineno": 188,
"revdate": [1522967222.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 188,
"line": "  }\n",
"lineno": 189,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 189,
"line": "\n",
"lineno": 190,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 190,
"line": "  nsCOMPtr\u003cnsIDocument\u003e doc;\n",
"lineno": 191,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 191,
"line": "  if (nsINode* node = loadInfo-\u003eLoadingNode()) {\n",
"lineno": 192,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 192,
"line": "    doc = node-\u003eOwnerDoc();\n",
"lineno": 193,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 193,
"line": "  }\n",
"lineno": 194,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 194,
"line": "\n",
"lineno": 195,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 195,
"line": "  nsAutoCString spec;\n",
"lineno": 196,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 196,
"line": "  uri-\u003eGetSpec(spec);\n",
"lineno": 197,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 197,
"line": "  NS_ConvertUTF8toUTF16 specUTF16(NS_UnescapeURL(spec));\n",
"lineno": 198,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 198,
"line": "  const char16_t* params[] = { specUTF16.get() };\n",
"lineno": 199,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 199,
"line": "\n",
"lineno": 200,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 200,
"line": "  nsContentUtils::ReportToConsole(nsIScriptError::warningFlag,\n",
"lineno": 201,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 201,
"line": "                                  NS_LITERAL_CSTRING(\"FTP_URI_BLOCKED\"),\n",
"lineno": 202,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 202,
"line": "                                  doc,\n",
"lineno": 203,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 203,
"line": "                                  nsContentUtils::eSECURITY_PROPERTIES,\n",
"lineno": 204,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 204,
"line": "                                  \"BlockSubresourceFTP\",\n",
"lineno": 205,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 205,
"line": "                                  params, ArrayLength(params));\n",
"lineno": 206,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 206,
"line": "\n",
"lineno": 207,
"revdate": [1522091108.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 208,
"line": "  return NS_ERROR_CONTENT_BLOCKED;\n",
"lineno": 208,
"revdate": [1522967222.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 208,
"line": "}\n",
"lineno": 209,
"revdate": [1522091108.0, -7200]
}, {
"node": "11ff93811572dbf11ceb485a0536108c6eff092d",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Block loading FTP as a subresource everywhere. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 209,
"line": "\n",
"lineno": 210,
"revdate": [1522091108.0, -7200]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 13,
"line": "static nsresult\n",
"lineno": 211,
"revdate": [1446624316.0, 28800]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 12,
"line": "ValidateSecurityFlags(nsILoadInfo* aLoadInfo)\n",
"lineno": 212,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 13,
"line": "{\n",
"lineno": 213,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 14,
"line": "  nsSecurityFlags securityMode = aLoadInfo-\u003eGetSecurityMode();\n",
"lineno": 214,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 15,
"line": "\n",
"lineno": 215,
"revdate": [1437358331.0, 25200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 167,
"line": "  // We should never perform a security check on a loadInfo that uses the flag\n",
"lineno": 216,
"revdate": [1522318583.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 168,
"line": "  // SEC_ONLY_FOR_EXPLICIT_CONTENTSEC_CHECK, because that is only used for temporary\n",
"lineno": 217,
"revdate": [1522318583.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 169,
"line": "  // loadInfos used for explicit nsIContentPolicy checks, but never be set as\n",
"lineno": 218,
"revdate": [1522318583.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 170,
"line": "  // a security flag on an actual channel.\n",
"lineno": 219,
"revdate": [1522318583.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 16,
"line": "  if (securityMode != nsILoadInfo::SEC_REQUIRE_SAME_ORIGIN_DATA_INHERITS &&\n",
"lineno": 220,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 17,
"line": "      securityMode != nsILoadInfo::SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED &&\n",
"lineno": 221,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 18,
"line": "      securityMode != nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS &&\n",
"lineno": 222,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 19,
"line": "      securityMode != nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL &&\n",
"lineno": 223,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 20,
"line": "      securityMode != nsILoadInfo::SEC_REQUIRE_CORS_DATA_INHERITS) {\n",
"lineno": 224,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 21,
"line": "    MOZ_ASSERT(false, \"need one securityflag from nsILoadInfo to perform security checks\");\n",
"lineno": 225,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 22,
"line": "    return NS_ERROR_FAILURE;\n",
"lineno": 226,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 23,
"line": "  }\n",
"lineno": 227,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 24,
"line": "\n",
"lineno": 228,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 31,
"line": "  // all good, found the right security flags\n",
"lineno": 229,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 32,
"line": "  return NS_OK;\n",
"lineno": 230,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 33,
"line": "}\n",
"lineno": 231,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 34,
"line": "\n",
"lineno": 232,
"revdate": [1437358331.0, 25200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 43,
"line": "static bool IsImageLoadInEditorAppType(nsILoadInfo* aLoadInfo)\n",
"lineno": 233,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 44,
"line": "{\n",
"lineno": 234,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 45,
"line": "  // Editor apps get special treatment here, editors can load images\n",
"lineno": 235,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 46,
"line": "  // from anywhere.  This allows editor to insert images from file://\n",
"lineno": 236,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 47,
"line": "  // into documents that are being edited.\n",
"lineno": 237,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 48,
"line": "  nsContentPolicyType type = aLoadInfo-\u003eInternalContentPolicyType();\n",
"lineno": 238,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 49,
"line": "  if (type != nsIContentPolicy::TYPE_INTERNAL_IMAGE  &&\n",
"lineno": 239,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 50,
"line": "      type != nsIContentPolicy::TYPE_INTERNAL_IMAGE_PRELOAD &&\n",
"lineno": 240,
"revdate": [1461778873.0, -7200]
}, {
"node": "4639ff15be811f874da20838f8102067ada62a49",
"author": "Tim Huang \u003ctihuang@mozilla.com\u003e",
"desc": "Bug 1277803 - Part 1 : Add a new ContentPolicy TYPE_INTERNAL_IMAGE_FAVICON for indicating a favicon loading. r=ckerschb\n",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 54,
"line": "      type != nsIContentPolicy::TYPE_INTERNAL_IMAGE_FAVICON &&\n",
"lineno": 241,
"revdate": [1476344634.0, -28800]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 51,
"line": "      type != nsIContentPolicy::TYPE_IMAGESET) {\n",
"lineno": 242,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 52,
"line": "    return false;\n",
"lineno": 243,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 53,
"line": "  }\n",
"lineno": 244,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 54,
"line": "\n",
"lineno": 245,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 55,
"line": "  uint32_t appType = nsIDocShell::APP_TYPE_UNKNOWN;\n",
"lineno": 246,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 56,
"line": "  nsINode* node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 247,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 57,
"line": "  if (!node) {\n",
"lineno": 248,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 58,
"line": "    return false;\n",
"lineno": 249,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 59,
"line": "  }\n",
"lineno": 250,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 60,
"line": "  nsIDocument* doc = node-\u003eOwnerDoc();\n",
"lineno": 251,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 61,
"line": "  if (!doc) {\n",
"lineno": 252,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 62,
"line": "    return false;\n",
"lineno": 253,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 63,
"line": "  }\n",
"lineno": 254,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 64,
"line": "\n",
"lineno": 255,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 65,
"line": "  nsCOMPtr\u003cnsIDocShellTreeItem\u003e docShellTreeItem = doc-\u003eGetDocShell();\n",
"lineno": 256,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 66,
"line": "  if (!docShellTreeItem) {\n",
"lineno": 257,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 67,
"line": "    return false;\n",
"lineno": 258,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 68,
"line": "  }\n",
"lineno": 259,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 69,
"line": "\n",
"lineno": 260,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 70,
"line": "  nsCOMPtr\u003cnsIDocShellTreeItem\u003e root;\n",
"lineno": 261,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 71,
"line": "  docShellTreeItem-\u003eGetRootTreeItem(getter_AddRefs(root));\n",
"lineno": 262,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 72,
"line": "  nsCOMPtr\u003cnsIDocShell\u003e docShell(do_QueryInterface(root));\n",
"lineno": 263,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 73,
"line": "  if (!docShell || NS_FAILED(docShell-\u003eGetAppType(&appType))) {\n",
"lineno": 264,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 74,
"line": "    appType = nsIDocShell::APP_TYPE_UNKNOWN;\n",
"lineno": 265,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 75,
"line": "  }\n",
"lineno": 266,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 76,
"line": "\n",
"lineno": 267,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 77,
"line": "  return appType == nsIDocShell::APP_TYPE_EDITOR;\n",
"lineno": 268,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 78,
"line": "}\n",
"lineno": 269,
"revdate": [1461778873.0, -7200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 79,
"line": "\n",
"lineno": 270,
"revdate": [1461778873.0, -7200]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 46,
"line": "static nsresult\n",
"lineno": 271,
"revdate": [1446624316.0, 28800]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 55,
"line": "DoCheckLoadURIChecks(nsIURI* aURI, nsILoadInfo* aLoadInfo)\n",
"lineno": 272,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 56,
"line": "{\n",
"lineno": 273,
"revdate": [1437358331.0, 25200]
}, {
"node": "7ace0805c2d399573ad74a25d8e0eaac16025acb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1228116 - Relax Security checks for DTD loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 49,
"line": "  // Bug 1228117: determine the correct security policy for DTD loads\n",
"lineno": 274,
"revdate": [1448487485.0, 28800]
}, {
"node": "7ace0805c2d399573ad74a25d8e0eaac16025acb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1228116 - Relax Security checks for DTD loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 50,
"line": "  if (aLoadInfo-\u003eGetExternalContentPolicyType() == nsIContentPolicy::TYPE_DTD) {\n",
"lineno": 275,
"revdate": [1448487485.0, 28800]
}, {
"node": "7ace0805c2d399573ad74a25d8e0eaac16025acb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1228116 - Relax Security checks for DTD loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 51,
"line": "    return NS_OK;\n",
"lineno": 276,
"revdate": [1448487485.0, 28800]
}, {
"node": "7ace0805c2d399573ad74a25d8e0eaac16025acb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1228116 - Relax Security checks for DTD loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 52,
"line": "  }\n",
"lineno": 277,
"revdate": [1448487485.0, 28800]
}, {
"node": "7ace0805c2d399573ad74a25d8e0eaac16025acb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1228116 - Relax Security checks for DTD loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 53,
"line": "\n",
"lineno": 278,
"revdate": [1448487485.0, 28800]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 88,
"line": "  if (IsImageLoadInEditorAppType(aLoadInfo)) {\n",
"lineno": 279,
"revdate": [1464547216.0, -7200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 89,
"line": "    return NS_OK;\n",
"lineno": 280,
"revdate": [1464547216.0, -7200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 90,
"line": "  }\n",
"lineno": 281,
"revdate": [1464547216.0, -7200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 48,
"line": "\n",
"lineno": 282,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 50,
"line": "  uint32_t flags = nsIScriptSecurityManager::STANDARD;\n",
"lineno": 283,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 51,
"line": "  if (aLoadInfo-\u003eGetAllowChrome()) {\n",
"lineno": 284,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 52,
"line": "    flags |= nsIScriptSecurityManager::ALLOW_CHROME;\n",
"lineno": 285,
"revdate": [1442282375.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 66,
"line": "  }\n",
"lineno": 286,
"revdate": [1437358331.0, 25200]
}, {
"node": "bbfbadb75603c46d8e87c6c321178836aac10e1c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1196013 - Use channel-\u003eascynOpen2 in toolkit/components/places. r=billm r=sicking r=mak",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 95,
"line": "  if (aLoadInfo-\u003eGetDisallowScript()) {\n",
"lineno": 287,
"revdate": [1464040651.0, -7200]
}, {
"node": "bbfbadb75603c46d8e87c6c321178836aac10e1c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1196013 - Use channel-\u003eascynOpen2 in toolkit/components/places. r=billm r=sicking r=mak",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 96,
"line": "    flags |= nsIScriptSecurityManager::DISALLOW_SCRIPT;\n",
"lineno": 288,
"revdate": [1464040651.0, -7200]
}, {
"node": "bbfbadb75603c46d8e87c6c321178836aac10e1c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1196013 - Use channel-\u003eascynOpen2 in toolkit/components/places. r=billm r=sicking r=mak",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 97,
"line": "  }\n",
"lineno": 289,
"revdate": [1464040651.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 67,
"line": "\n",
"lineno": 290,
"revdate": [1437358331.0, 25200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 100,
"line": "  // Only call CheckLoadURIWithPrincipal() using the TriggeringPrincipal and not\n",
"lineno": 291,
"revdate": [1464547216.0, -7200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 101,
"line": "  // the LoadingPrincipal when SEC_ALLOW_CROSS_ORIGIN_* security flags are set,\n",
"lineno": 292,
"revdate": [1464547216.0, -7200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 102,
"line": "  // to allow, e.g. user stylesheets to load chrome:// URIs.\n",
"lineno": 293,
"revdate": [1464547216.0, -7200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 103,
"line": "  return nsContentUtils::GetSecurityManager()-\u003e\n",
"lineno": 294,
"revdate": [1464547216.0, -7200]
}, {
"node": "0c174794580dcc4d40eace91fed1bdbd87491b2e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1269254 - Skip CheckLoadURIWithPrincipal checks within ContentSecurityManager on loadingPrincipal if security flag indicates allow cross origin loads (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 104,
"line": "           CheckLoadURIWithPrincipal(aLoadInfo-\u003eTriggeringPrincipal(),\n",
"lineno": 295,
"revdate": [1464547216.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 84,
"line": "                                     aURI,\n",
"lineno": 296,
"revdate": [1437358331.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 68,
"line": "                                     flags);\n",
"lineno": 297,
"revdate": [1442282375.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 89,
"line": "}\n",
"lineno": 298,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 90,
"line": "\n",
"lineno": 299,
"revdate": [1437358331.0, 25200]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 76,
"line": "static bool\n",
"lineno": 300,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 77,
"line": "URIHasFlags(nsIURI* aURI, uint32_t aURIFlags)\n",
"lineno": 301,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 78,
"line": "{\n",
"lineno": 302,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 79,
"line": "  bool hasFlags;\n",
"lineno": 303,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 80,
"line": "  nsresult rv = NS_URIChainHasFlags(aURI, aURIFlags, &hasFlags);\n",
"lineno": 304,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 81,
"line": "  NS_ENSURE_SUCCESS(rv, false);\n",
"lineno": 305,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 82,
"line": "\n",
"lineno": 306,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 83,
"line": "  return hasFlags;\n",
"lineno": 307,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 84,
"line": "}\n",
"lineno": 308,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 85,
"line": "\n",
"lineno": 309,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 86,
"line": "static nsresult\n",
"lineno": 310,
"revdate": [1446624316.0, 28800]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 94,
"line": "DoSOPChecks(nsIURI* aURI, nsILoadInfo* aLoadInfo, nsIChannel* aChannel)\n",
"lineno": 311,
"revdate": [1449444795.0, 18000]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 76,
"line": "{\n",
"lineno": 312,
"revdate": [1442282375.0, 25200]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 89,
"line": "  if (aLoadInfo-\u003eGetAllowChrome() &&\n",
"lineno": 313,
"revdate": [1446624316.0, 28800]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 90,
"line": "      (URIHasFlags(aURI, nsIProtocolHandler::URI_IS_UI_RESOURCE) ||\n",
"lineno": 314,
"revdate": [1446624316.0, 28800]
}, {
"node": "cf08f9815613d8ad1676eaa22febcd2473d53924",
"author": "Xidorn Quan \u003cme@upsuper.org\u003e",
"desc": "Bug 1403024 part 1 - Add nsContentUtils::SchemeIs helper function. r=bholley\n\nMozReview-Commit-ID: 2NVc5QJSjl",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 183,
"line": "       nsContentUtils::SchemeIs(aURI, \"moz-safe-about\"))) {\n",
"lineno": 315,
"revdate": [1506385261.0, -36000]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 92,
"line": "    // UI resources are allowed.\n",
"lineno": 316,
"revdate": [1446624316.0, 28800]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 79,
"line": "    return DoCheckLoadURIChecks(aURI, aLoadInfo);\n",
"lineno": 317,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 80,
"line": "  }\n",
"lineno": 318,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 81,
"line": "\n",
"lineno": 319,
"revdate": [1442282375.0, 25200]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 103,
"line": "  NS_ENSURE_FALSE(NS_HasBeenCrossOrigin(aChannel, true),\n",
"lineno": 320,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 104,
"line": "                  NS_ERROR_DOM_BAD_URI);\n",
"lineno": 321,
"revdate": [1449444795.0, 18000]
}, {
"node": "ede755bf408567d1ff919e5e5c9fc20e7bff7a73",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1195167 part 1: Let necko handle all protocols. r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 87,
"line": "\n",
"lineno": 322,
"revdate": [1445304276.0, 25200]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 106,
"line": "  return NS_OK;\n",
"lineno": 323,
"revdate": [1449444795.0, 18000]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 88,
"line": "}\n",
"lineno": 324,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 89,
"line": "\n",
"lineno": 325,
"revdate": [1442282375.0, 25200]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 111,
"line": "static nsresult\n",
"lineno": 326,
"revdate": [1446624316.0, 28800]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 92,
"line": "DoCORSChecks(nsIChannel* aChannel, nsILoadInfo* aLoadInfo,\n",
"lineno": 327,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 93,
"line": "             nsCOMPtr\u003cnsIStreamListener\u003e& aInAndOutListener)\n",
"lineno": 328,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 94,
"line": "{\n",
"lineno": 329,
"revdate": [1437358331.0, 25200]
}, {
"node": "5d5c5ddddff156f2f3f23e3da041ddd091c3dabc",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1191645 - Use channel-\u003easycnOpen2 in dom/base/nsSyncLoadService.cpp. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 103,
"line": "  MOZ_RELEASE_ASSERT(aInAndOutListener, \"can not perform CORS checks without a listener\");\n",
"lineno": 330,
"revdate": [1445894579.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 108,
"line": "\n",
"lineno": 331,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 109,
"line": "  // No need to set up CORS if TriggeringPrincipal is the SystemPrincipal.\n",
"lineno": 332,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 110,
"line": "  // For example, allow user stylesheets to load XBL from external files\n",
"lineno": 333,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 111,
"line": "  // without requiring CORS.\n",
"lineno": 334,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 112,
"line": "  if (nsContentUtils::IsSystemPrincipal(aLoadInfo-\u003eTriggeringPrincipal())) {\n",
"lineno": 335,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 113,
"line": "    return NS_OK;\n",
"lineno": 336,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 114,
"line": "  }\n",
"lineno": 337,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 115,
"line": "\n",
"lineno": 338,
"revdate": [1458342843.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 99,
"line": "  nsIPrincipal* loadingPrincipal = aLoadInfo-\u003eLoadingPrincipal();\n",
"lineno": 339,
"revdate": [1437358331.0, 25200]
}, {
"node": "e8c7dfe727cd970e2c3294934e2927b14143c205",
"author": "Nathan Froyd \u003cfroydnj@mozilla.com\u003e",
"desc": "Bug 1207245 - part 6 - rename nsRefPtr\u003cT\u003e to RefPtr\u003cT\u003e; r=ehsan; a=Tomcat\n\nThe bulk of this commit was generated with a script, executed at the top\nlevel of a typical source code checkout.  The only non-machine-generated\npart was modifying MFBT's moz.build to reflect the new naming.\n\nCLOSED TREE makes big refactorings like this a piece of cake.\n\n # The main substitution.\nfind . -name '*.cpp' -o -name '*.cc' -o -name '*.h' -o -name '*.mm' -o -name '*.idl'| \\\n    xargs perl -p -i -e '\n s/nsRefPtr\\.h/RefPtr\\.h/g; # handle includes\n s/nsRefPtr ?\u003c/RefPtr\u003c/g;   # handle declarations and variables\n'\n\n # Handle a special friend declaration in gfx/layers/AtomicRefCountedWithFinalize.h.\nperl -p -i -e 's/::nsRefPtr;/::RefPtr;/' gfx/layers/AtomicRefCountedWithFinalize.h\n\n # Handle nsRefPtr.h itself, a couple places that define constructors\n # from nsRefPtr, and code generators specially.  We do this here, rather\n # than indiscriminantly s/nsRefPtr/RefPtr/, because that would rename\n # things like nsRefPtrHashtable.\nperl -p -i -e 's/nsRefPtr/RefPtr/g' \\\n     mfbt/nsRefPtr.h \\\n     xpcom/glue/nsCOMPtr.h \\\n     xpcom/base/OwningNonNull.h \\\n     ipc/ipdl/ipdl/lower.py \\\n     ipc/ipdl/ipdl/builtin.py \\\n     dom/bindings/Codegen.py \\\n     python/lldbutils/lldbutils/utils.py\n\n # In our indiscriminate substitution above, we renamed\n # nsRefPtrGetterAddRefs, the class behind getter_AddRefs.  Fix that up.\nfind . -name '*.cpp' -o -name '*.h' -o -name '*.idl' | \\\n    xargs perl -p -i -e 's/nsRefPtrGetterAddRefs/RefPtrGetterAddRefs/g'\n\nif [ -d .git ]; then\n    git mv mfbt/nsRefPtr.h mfbt/RefPtr.h\nelse\n    hg mv mfbt/nsRefPtr.h mfbt/RefPtr.h\nfi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 98,
"line": "  RefPtr\u003cnsCORSListenerProxy\u003e corsListener =\n",
"lineno": 340,
"revdate": [1445145888.0, 14400]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 101,
"line": "    new nsCORSListenerProxy(aInAndOutListener,\n",
"lineno": 341,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 102,
"line": "                            loadingPrincipal,\n",
"lineno": 342,
"revdate": [1437358331.0, 25200]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 112,
"line": "                            aLoadInfo-\u003eGetCookiePolicy() ==\n",
"lineno": 343,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 113,
"line": "                              nsILoadInfo::SEC_COOKIES_INCLUDE);\n",
"lineno": 344,
"revdate": [1449444795.0, 18000]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 104,
"line": "  // XXX: @arg: DataURIHandling::Allow\n",
"lineno": 345,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 105,
"line": "  // lets use  DataURIHandling::Allow for now and then decide on callsite basis. see also:\n",
"lineno": 346,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 106,
"line": "  // http://mxr.mozilla.org/mozilla-central/source/dom/security/nsCORSListenerProxy.h#33\n",
"lineno": 347,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 107,
"line": "  nsresult rv = corsListener-\u003eInit(aChannel, DataURIHandling::Allow);\n",
"lineno": 348,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 108,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 349,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 109,
"line": "  aInAndOutListener = corsListener;\n",
"lineno": 350,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 110,
"line": "  return NS_OK;\n",
"lineno": 351,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 111,
"line": "}\n",
"lineno": 352,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 112,
"line": "\n",
"lineno": 353,
"revdate": [1437358331.0, 25200]
}, {
"node": "a7581915fe478aef52b0702268681262c8164cc8",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1213646: Allow URI_IS_UI_RESOURCE and safe about: URIs when SEC_ALLOW_CHROME is set. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 130,
"line": "static nsresult\n",
"lineno": 354,
"revdate": [1446624316.0, 28800]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 165,
"line": "DoContentSecurityChecks(nsIChannel* aChannel, nsILoadInfo* aLoadInfo)\n",
"lineno": 355,
"revdate": [1463479451.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 115,
"line": "{\n",
"lineno": 356,
"revdate": [1437358331.0, 25200]
}, {
"node": "a31b2d7d07b80484ae2b66689559e39108a7ee71",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Fix nsILoadInfo-\u003eGetContentPolicyType API to be less ambigious. Audit and fix all users of it. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 114,
"line": "  nsContentPolicyType contentPolicyType =\n",
"lineno": 357,
"revdate": [1445278494.0, 25200]
}, {
"node": "a31b2d7d07b80484ae2b66689559e39108a7ee71",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Fix nsILoadInfo-\u003eGetContentPolicyType API to be less ambigious. Audit and fix all users of it. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 115,
"line": "    aLoadInfo-\u003eGetExternalContentPolicyType();\n",
"lineno": 358,
"revdate": [1445278494.0, 25200]
}, {
"node": "a31b2d7d07b80484ae2b66689559e39108a7ee71",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Fix nsILoadInfo-\u003eGetContentPolicyType API to be less ambigious. Audit and fix all users of it. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 116,
"line": "  nsContentPolicyType internalContentPolicyType =\n",
"lineno": 359,
"revdate": [1445278494.0, 25200]
}, {
"node": "a31b2d7d07b80484ae2b66689559e39108a7ee71",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Fix nsILoadInfo-\u003eGetContentPolicyType API to be less ambigious. Audit and fix all users of it. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 117,
"line": "    aLoadInfo-\u003eInternalContentPolicyType();\n",
"lineno": 360,
"revdate": [1445278494.0, 25200]
}, {
"node": "c98f6e3162261dc6c7053af06babc5b134b74496",
"author": "Wes Kocher \u003cwkocher@mozilla.com\u003e",
"desc": "Backed out 2 changesets (bug 1182571) for being a likely cause of the Android S4 errors\n\nBacked out changeset e2b3064dcace (bug 1182571)\nBacked out changeset 8153ae231d16 (bug 1182571)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 115,
"line": "  nsCString mimeTypeGuess;\n",
"lineno": 361,
"revdate": [1444943226.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 119,
"line": "\n",
"lineno": 362,
"revdate": [1437358331.0, 25200]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 180,
"line": "  nsCOMPtr\u003cnsIURI\u003e uri;\n",
"lineno": 363,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 181,
"line": "  nsresult rv = NS_GetFinalChannelURI(aChannel, getter_AddRefs(uri));\n",
"lineno": 364,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 182,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 365,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 183,
"line": "\n",
"lineno": 366,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 184,
"line": "  if (contentPolicyType == nsIContentPolicy::TYPE_DOCUMENT ||\n",
"lineno": 367,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 185,
"line": "      contentPolicyType == nsIContentPolicy::TYPE_SUBDOCUMENT) {\n",
"lineno": 368,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 186,
"line": "    // TYPE_DOCUMENT and TYPE_SUBDOCUMENT loads might potentially\n",
"lineno": 369,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 187,
"line": "    // be wyciwyg:// channels. Let's fix up the URI so we can\n",
"lineno": 370,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 188,
"line": "    // perform proper security checks.\n",
"lineno": 371,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 189,
"line": "    nsCOMPtr\u003cnsIURIFixup\u003e urifixup(do_GetService(NS_URIFIXUP_CONTRACTID, &rv));\n",
"lineno": 372,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 190,
"line": "    if (NS_SUCCEEDED(rv) && urifixup) {\n",
"lineno": 373,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 191,
"line": "      nsCOMPtr\u003cnsIURI\u003e fixedURI;\n",
"lineno": 374,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 192,
"line": "      rv = urifixup-\u003eCreateExposableURI(uri, getter_AddRefs(fixedURI));\n",
"lineno": 375,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 193,
"line": "      if (NS_SUCCEEDED(rv)) {\n",
"lineno": 376,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 194,
"line": "        uri = fixedURI;\n",
"lineno": 377,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 195,
"line": "      }\n",
"lineno": 378,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 196,
"line": "    }\n",
"lineno": 379,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 197,
"line": "  }\n",
"lineno": 380,
"revdate": [1483473570.0, -3600]
}, {
"node": "3883d00c447ee8a27f56f8cd4e8bb2e6c167004f",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1240193 - Skip TYPE_DOCUMENT assertions for loads initiated by JS tests (r=tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 184,
"line": "\n",
"lineno": 381,
"revdate": [1467197985.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 120,
"line": "  switch(contentPolicyType) {\n",
"lineno": 382,
"revdate": [1437358331.0, 25200]
}, {
"node": "0fbb2ec4b4a84968764a678474fa2ce35a8b2085",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182539 - Use channel-\u003eascynOpen2 in dom/base/nsDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 121,
"line": "    case nsIContentPolicy::TYPE_OTHER: {\n",
"lineno": 383,
"revdate": [1438358294.0, 25200]
}, {
"node": "0fbb2ec4b4a84968764a678474fa2ce35a8b2085",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182539 - Use channel-\u003eascynOpen2 in dom/base/nsDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 122,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 384,
"revdate": [1438358294.0, 25200]
}, {
"node": "0fbb2ec4b4a84968764a678474fa2ce35a8b2085",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182539 - Use channel-\u003eascynOpen2 in dom/base/nsDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 124,
"line": "      break;\n",
"lineno": 385,
"revdate": [1438358294.0, 25200]
}, {
"node": "0fbb2ec4b4a84968764a678474fa2ce35a8b2085",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182539 - Use channel-\u003eascynOpen2 in dom/base/nsDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 125,
"line": "    }\n",
"lineno": 386,
"revdate": [1438358294.0, 25200]
}, {
"node": "0fbb2ec4b4a84968764a678474fa2ce35a8b2085",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182539 - Use channel-\u003eascynOpen2 in dom/base/nsDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 126,
"line": "\n",
"lineno": 387,
"revdate": [1438358294.0, 25200]
}, {
"node": "eca8be0e5336302a3a3de263f90ae4bd40a649bf",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1208559 - Hook up ServicerWorkers with CSP (r=sicking,bkelly,dveditz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 127,
"line": "    case nsIContentPolicy::TYPE_SCRIPT: {\n",
"lineno": 388,
"revdate": [1445223558.0, 25200]
}, {
"node": "eca8be0e5336302a3a3de263f90ae4bd40a649bf",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1208559 - Hook up ServicerWorkers with CSP (r=sicking,bkelly,dveditz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 128,
"line": "      mimeTypeGuess = NS_LITERAL_CSTRING(\"application/javascript\");\n",
"lineno": 389,
"revdate": [1445223558.0, 25200]
}, {
"node": "eca8be0e5336302a3a3de263f90ae4bd40a649bf",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1208559 - Hook up ServicerWorkers with CSP (r=sicking,bkelly,dveditz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 130,
"line": "      break;\n",
"lineno": 390,
"revdate": [1445223558.0, 25200]
}, {
"node": "eca8be0e5336302a3a3de263f90ae4bd40a649bf",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1208559 - Hook up ServicerWorkers with CSP (r=sicking,bkelly,dveditz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 131,
"line": "    }\n",
"lineno": 391,
"revdate": [1445223558.0, 25200]
}, {
"node": "eca8be0e5336302a3a3de263f90ae4bd40a649bf",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1208559 - Hook up ServicerWorkers with CSP (r=sicking,bkelly,dveditz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 132,
"line": "\n",
"lineno": 392,
"revdate": [1445223558.0, 25200]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 146,
"line": "    case nsIContentPolicy::TYPE_IMAGE: {\n",
"lineno": 393,
"revdate": [1454474102.0, 28800]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 199,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 394,
"revdate": [1461778873.0, -7200]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 148,
"line": "      break;\n",
"lineno": 395,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "    }\n",
"lineno": 396,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 150,
"line": "\n",
"lineno": 397,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 151,
"line": "    case nsIContentPolicy::TYPE_STYLESHEET: {\n",
"lineno": 398,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 152,
"line": "      mimeTypeGuess = NS_LITERAL_CSTRING(\"text/css\");\n",
"lineno": 399,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 154,
"line": "      break;\n",
"lineno": 400,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 155,
"line": "    }\n",
"lineno": 401,
"revdate": [1454474102.0, 28800]
}, {
"node": "86d0744f63c6e6b9e72c61b5d08574f74c450bc1",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195173 - Use channel-\u003eascynOpen2 layout/style/Loader.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 156,
"line": "\n",
"lineno": 402,
"revdate": [1454474102.0, 28800]
}, {
"node": "2bae08c081185081c42cea4bac6822d109c0b55e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1188642 - Use channel-\u003eascynOpen2 in dom/base/nsObjectLoadingContent.cpp r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 203,
"line": "    case nsIContentPolicy::TYPE_OBJECT: {\n",
"lineno": 403,
"revdate": [1467099475.0, -7200]
}, {
"node": "2bae08c081185081c42cea4bac6822d109c0b55e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1188642 - Use channel-\u003eascynOpen2 in dom/base/nsObjectLoadingContent.cpp r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 204,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 404,
"revdate": [1467099475.0, -7200]
}, {
"node": "2bae08c081185081c42cea4bac6822d109c0b55e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1188642 - Use channel-\u003eascynOpen2 in dom/base/nsObjectLoadingContent.cpp r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 206,
"line": "      break;\n",
"lineno": 405,
"revdate": [1467099475.0, -7200]
}, {
"node": "2bae08c081185081c42cea4bac6822d109c0b55e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1188642 - Use channel-\u003eascynOpen2 in dom/base/nsObjectLoadingContent.cpp r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 207,
"line": "    }\n",
"lineno": 406,
"revdate": [1467099475.0, -7200]
}, {
"node": "2bae08c081185081c42cea4bac6822d109c0b55e",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1188642 - Use channel-\u003eascynOpen2 in dom/base/nsObjectLoadingContent.cpp r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 208,
"line": "\n",
"lineno": 407,
"revdate": [1467099475.0, -7200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 133,
"line": "    case nsIContentPolicy::TYPE_DOCUMENT: {\n",
"lineno": 408,
"revdate": [1439227520.0, 25200]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 231,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 409,
"revdate": [1483473570.0, -3600]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 135,
"line": "      break;\n",
"lineno": 410,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 136,
"line": "    }\n",
"lineno": 411,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 137,
"line": "\n",
"lineno": 412,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 138,
"line": "    case nsIContentPolicy::TYPE_SUBDOCUMENT: {\n",
"lineno": 413,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 139,
"line": "      mimeTypeGuess = NS_LITERAL_CSTRING(\"text/html\");\n",
"lineno": 414,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 144,
"line": "      break;\n",
"lineno": 415,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 145,
"line": "    }\n",
"lineno": 416,
"revdate": [1439227520.0, 25200]
}, {
"node": "12742043d2a70d926a290828e04688c4c3473d4c",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1187165 -  Use channel-\u003eascynOpen2 in dom/base/ImportManager (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 146,
"line": "\n",
"lineno": 417,
"revdate": [1439227520.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 143,
"line": "    case nsIContentPolicy::TYPE_REFRESH: {\n",
"lineno": 418,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 144,
"line": "      MOZ_ASSERT(false, \"contentPolicyType not supported yet\");\n",
"lineno": 419,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 145,
"line": "      break;\n",
"lineno": 420,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 146,
"line": "    }\n",
"lineno": 421,
"revdate": [1442282375.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 147,
"line": "\n",
"lineno": 422,
"revdate": [1442282375.0, 25200]
}, {
"node": "fa170734154a12789670d9621be3483105b35558",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192955 - Use channel-\u003eascynOpen2 for PING in docshell/base/nsDocShell.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 148,
"line": "    case nsIContentPolicy::TYPE_XBL: {\n",
"lineno": 423,
"revdate": [1439481208.0, 25200]
}, {
"node": "cf37257f81d2db0b292b0ac1de24ecb511f73c8e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195162 - Use channel-\u003eascynOpen2 dom/xbl/nsXBLService.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 424,
"revdate": [1442282375.0, 25200]
}, {
"node": "fa170734154a12789670d9621be3483105b35558",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192955 - Use channel-\u003eascynOpen2 for PING in docshell/base/nsDocShell.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 150,
"line": "      break;\n",
"lineno": 425,
"revdate": [1439481208.0, 25200]
}, {
"node": "fa170734154a12789670d9621be3483105b35558",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192955 - Use channel-\u003eascynOpen2 for PING in docshell/base/nsDocShell.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 151,
"line": "    }\n",
"lineno": 426,
"revdate": [1439481208.0, 25200]
}, {
"node": "fa170734154a12789670d9621be3483105b35558",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192955 - Use channel-\u003eascynOpen2 for PING in docshell/base/nsDocShell.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 152,
"line": "\n",
"lineno": 427,
"revdate": [1439481208.0, 25200]
}, {
"node": "9776adf990a4072f2236e06397bf73118a539219",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188637 - Use channel-\u003eascynOpen2 in dom/base/EventSource.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 135,
"line": "    case nsIContentPolicy::TYPE_PING: {\n",
"lineno": 428,
"revdate": [1438743979.0, 25200]
}, {
"node": "fa170734154a12789670d9621be3483105b35558",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192955 - Use channel-\u003eascynOpen2 for PING in docshell/base/nsDocShell.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 154,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 429,
"revdate": [1439481208.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 139,
"line": "      break;\n",
"lineno": 430,
"revdate": [1438743937.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 140,
"line": "    }\n",
"lineno": 431,
"revdate": [1438743937.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 141,
"line": "\n",
"lineno": 432,
"revdate": [1438743937.0, 25200]
}, {
"node": "9776adf990a4072f2236e06397bf73118a539219",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188637 - Use channel-\u003eascynOpen2 in dom/base/EventSource.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 140,
"line": "    case nsIContentPolicy::TYPE_XMLHTTPREQUEST: {\n",
"lineno": 433,
"revdate": [1438743979.0, 25200]
}, {
"node": "9776adf990a4072f2236e06397bf73118a539219",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188637 - Use channel-\u003eascynOpen2 in dom/base/EventSource.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 141,
"line": "      // alias nsIContentPolicy::TYPE_DATAREQUEST:\n",
"lineno": 434,
"revdate": [1438743979.0, 25200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 262,
"line": "#ifdef DEBUG\n",
"lineno": 435,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 263,
"line": "      {\n",
"lineno": 436,
"revdate": [1504627267.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 388,
"line": "        nsCOMPtr\u003cnsINode\u003e node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 437,
"revdate": [1522318583.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 346,
"line": "        MOZ_ASSERT(!node || node-\u003eNodeType() == nsINode::DOCUMENT_NODE,\n",
"lineno": 438,
"revdate": [1517285453.0, 18000]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 266,
"line": "                   \"type_xml requires requestingContext of type Document\");\n",
"lineno": 439,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 267,
"line": "      }\n",
"lineno": 440,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 268,
"line": "#endif\n",
"lineno": 441,
"revdate": [1504627267.0, -7200]
}, {
"node": "ae826f6849c430ad1c32f5e1c89c4fb5aaa44831",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Make nsXMLHttpRequest use AsyncOpen2. r=ehsan",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 175,
"line": "      // We're checking for the external TYPE_XMLHTTPREQUEST here in case\n",
"lineno": 442,
"revdate": [1445278494.0, 25200]
}, {
"node": "ae826f6849c430ad1c32f5e1c89c4fb5aaa44831",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Make nsXMLHttpRequest use AsyncOpen2. r=ehsan",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 176,
"line": "      // an addon creates a request with that type.\n",
"lineno": 443,
"revdate": [1445278494.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "      if (internalContentPolicyType ==\n",
"lineno": 444,
"revdate": [1439227148.0, 25200]
}, {
"node": "ae826f6849c430ad1c32f5e1c89c4fb5aaa44831",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Make nsXMLHttpRequest use AsyncOpen2. r=ehsan",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 178,
"line": "            nsIContentPolicy::TYPE_INTERNAL_XMLHTTPREQUEST ||\n",
"lineno": 445,
"revdate": [1445278494.0, 25200]
}, {
"node": "ae826f6849c430ad1c32f5e1c89c4fb5aaa44831",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Make nsXMLHttpRequest use AsyncOpen2. r=ehsan",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 179,
"line": "          internalContentPolicyType ==\n",
"lineno": 446,
"revdate": [1445278494.0, 25200]
}, {
"node": "ae826f6849c430ad1c32f5e1c89c4fb5aaa44831",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Make nsXMLHttpRequest use AsyncOpen2. r=ehsan",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 180,
"line": "            nsIContentPolicy::TYPE_XMLHTTPREQUEST) {\n",
"lineno": 447,
"revdate": [1445278494.0, 25200]
}, {
"node": "ae826f6849c430ad1c32f5e1c89c4fb5aaa44831",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1182571: Make nsXMLHttpRequest use AsyncOpen2. r=ehsan",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 181,
"line": "        mimeTypeGuess = EmptyCString();\n",
"lineno": 448,
"revdate": [1445278494.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 152,
"line": "      }\n",
"lineno": 449,
"revdate": [1439227148.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 153,
"line": "      else {\n",
"lineno": 450,
"revdate": [1439227148.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 154,
"line": "        MOZ_ASSERT(internalContentPolicyType ==\n",
"lineno": 451,
"revdate": [1439227148.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 155,
"line": "                   nsIContentPolicy::TYPE_INTERNAL_EVENTSOURCE,\n",
"lineno": 452,
"revdate": [1439227148.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 156,
"line": "                   \"can not set mime type guess for unexpected internal type\");\n",
"lineno": 453,
"revdate": [1439227148.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 157,
"line": "        mimeTypeGuess = NS_LITERAL_CSTRING(TEXT_EVENT_STREAM);\n",
"lineno": 454,
"revdate": [1439227148.0, 25200]
}, {
"node": "f73f15ea2b8ea5e1654078b2bae16172af2c1f0f",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182544 - Use channel-\u003eascynOpen2 in dom/xml/XMLDocument.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 158,
"line": "      }\n",
"lineno": 455,
"revdate": [1439227148.0, 25200]
}, {
"node": "9776adf990a4072f2236e06397bf73118a539219",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188637 - Use channel-\u003eascynOpen2 in dom/base/EventSource.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 144,
"line": "      break;\n",
"lineno": 456,
"revdate": [1438743979.0, 25200]
}, {
"node": "9776adf990a4072f2236e06397bf73118a539219",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188637 - Use channel-\u003eascynOpen2 in dom/base/EventSource.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 145,
"line": "    }\n",
"lineno": 457,
"revdate": [1438743979.0, 25200]
}, {
"node": "9776adf990a4072f2236e06397bf73118a539219",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188637 - Use channel-\u003eascynOpen2 in dom/base/EventSource.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 146,
"line": "\n",
"lineno": 458,
"revdate": [1438743979.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 142,
"line": "    case nsIContentPolicy::TYPE_OBJECT_SUBREQUEST: {\n",
"lineno": 459,
"revdate": [1438743937.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 143,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 460,
"revdate": [1438743937.0, 25200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 289,
"line": "#ifdef DEBUG\n",
"lineno": 461,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 290,
"line": "      {\n",
"lineno": 462,
"revdate": [1504627267.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 414,
"line": "        nsCOMPtr\u003cnsINode\u003e node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 463,
"revdate": [1522318583.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 373,
"line": "        MOZ_ASSERT(!node || node-\u003eNodeType() == nsINode::ELEMENT_NODE,\n",
"lineno": 464,
"revdate": [1517285453.0, 18000]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 293,
"line": "                   \"type_subrequest requires requestingContext of type Element\");\n",
"lineno": 465,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 294,
"line": "      }\n",
"lineno": 466,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 295,
"line": "#endif\n",
"lineno": 467,
"revdate": [1504627267.0, -7200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 148,
"line": "      break;\n",
"lineno": 468,
"revdate": [1438743937.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "    }\n",
"lineno": 469,
"revdate": [1438743937.0, 25200]
}, {
"node": "22458d00ae2503f59fd8f92e18950fa39f3c7e0e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182543 - Use channel-\u003eascynOpen2 in dom/plugins/base/nsPluginHost.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 150,
"line": "\n",
"lineno": 470,
"revdate": [1438743937.0, 25200]
}, {
"node": "79240162428553ba63d4f918643f44ae77444adb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": " Bug 1182546 - Use channel-\u003eOpen2() in parser/htmlparser/nsExpatDriver.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 220,
"line": "    case nsIContentPolicy::TYPE_DTD: {\n",
"lineno": 471,
"revdate": [1448045754.0, 28800]
}, {
"node": "79240162428553ba63d4f918643f44ae77444adb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": " Bug 1182546 - Use channel-\u003eOpen2() in parser/htmlparser/nsExpatDriver.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 221,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 472,
"revdate": [1448045754.0, 28800]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 302,
"line": "#ifdef DEBUG\n",
"lineno": 473,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 303,
"line": "      {\n",
"lineno": 474,
"revdate": [1504627267.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 426,
"line": "        nsCOMPtr\u003cnsINode\u003e node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 475,
"revdate": [1522318583.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 386,
"line": "        MOZ_ASSERT(!node || node-\u003eNodeType() == nsINode::DOCUMENT_NODE,\n",
"lineno": 476,
"revdate": [1517285453.0, 18000]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 306,
"line": "                   \"type_dtd requires requestingContext of type Document\");\n",
"lineno": 477,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 307,
"line": "      }\n",
"lineno": 478,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 308,
"line": "#endif\n",
"lineno": 479,
"revdate": [1504627267.0, -7200]
}, {
"node": "79240162428553ba63d4f918643f44ae77444adb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": " Bug 1182546 - Use channel-\u003eOpen2() in parser/htmlparser/nsExpatDriver.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 226,
"line": "      break;\n",
"lineno": 480,
"revdate": [1448045754.0, 28800]
}, {
"node": "79240162428553ba63d4f918643f44ae77444adb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": " Bug 1182546 - Use channel-\u003eOpen2() in parser/htmlparser/nsExpatDriver.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 227,
"line": "    }\n",
"lineno": 481,
"revdate": [1448045754.0, 28800]
}, {
"node": "79240162428553ba63d4f918643f44ae77444adb",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": " Bug 1182546 - Use channel-\u003eOpen2() in parser/htmlparser/nsExpatDriver.cpp (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 228,
"line": "\n",
"lineno": 482,
"revdate": [1448045754.0, 28800]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 135,
"line": "    case nsIContentPolicy::TYPE_FONT: {\n",
"lineno": 483,
"revdate": [1437845362.0, 25200]
}, {
"node": "7251e33ee977c169ae0228472047acb275ecfb49",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1195172 - Use channel-\u003eascynOpen2 layout/style/FontFaceSet.cpp (r=bz,cam)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 232,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 484,
"revdate": [1456866373.0, 28800]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 137,
"line": "      break;\n",
"lineno": 485,
"revdate": [1437358331.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 138,
"line": "    }\n",
"lineno": 486,
"revdate": [1437845362.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 138,
"line": "\n",
"lineno": 487,
"revdate": [1437358331.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 140,
"line": "    case nsIContentPolicy::TYPE_MEDIA: {\n",
"lineno": 488,
"revdate": [1437845362.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 144,
"line": "      if (internalContentPolicyType == nsIContentPolicy::TYPE_INTERNAL_TRACK) {\n",
"lineno": 489,
"revdate": [1437845362.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 145,
"line": "        mimeTypeGuess = NS_LITERAL_CSTRING(\"text/vtt\");\n",
"lineno": 490,
"revdate": [1437845362.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 146,
"line": "      }\n",
"lineno": 491,
"revdate": [1437845362.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 147,
"line": "      else {\n",
"lineno": 492,
"revdate": [1437845362.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 148,
"line": "        mimeTypeGuess = EmptyCString();\n",
"lineno": 493,
"revdate": [1437845362.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "      }\n",
"lineno": 494,
"revdate": [1437845362.0, 25200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 326,
"line": "#ifdef DEBUG\n",
"lineno": 495,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 327,
"line": "      {\n",
"lineno": 496,
"revdate": [1504627267.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 448,
"line": "        nsCOMPtr\u003cnsINode\u003e node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 497,
"revdate": [1522318583.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 410,
"line": "        MOZ_ASSERT(!node || node-\u003eNodeType() == nsINode::ELEMENT_NODE,\n",
"lineno": 498,
"revdate": [1517285453.0, 18000]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 330,
"line": "                   \"type_media requires requestingContext of type Element\");\n",
"lineno": 499,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 331,
"line": "      }\n",
"lineno": 500,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 332,
"line": "#endif\n",
"lineno": 501,
"revdate": [1504627267.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 149,
"line": "      break;\n",
"lineno": 502,
"revdate": [1437358331.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 155,
"line": "    }\n",
"lineno": 503,
"revdate": [1437845362.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 150,
"line": "\n",
"lineno": 504,
"revdate": [1437358331.0, 25200]
}, {
"node": "acc983ca0dec710088764398caba4eb10512de21",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188028 - Use channel-\u003eascynOpen2 in dom/security/nsCSPContext.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 240,
"line": "    case nsIContentPolicy::TYPE_WEBSOCKET: {\n",
"lineno": 505,
"revdate": [1438023476.0, 25200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 298,
"line": "      // Websockets have to use the proxied URI:\n",
"lineno": 506,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 299,
"line": "      // ws:// instead of http:// for CSP checks\n",
"lineno": 507,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 300,
"line": "      nsCOMPtr\u003cnsIHttpChannelInternal\u003e httpChannelInternal\n",
"lineno": 508,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 301,
"line": "        = do_QueryInterface(aChannel);\n",
"lineno": 509,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 302,
"line": "      MOZ_ASSERT(httpChannelInternal);\n",
"lineno": 510,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 303,
"line": "      if (httpChannelInternal) {\n",
"lineno": 511,
"revdate": [1463479451.0, -7200]
}, {
"node": "828e8f37ba26aca276952462baa176fc02e79975",
"author": "Wei-Cheng Pan \u003cwpan@mozilla.com\u003e",
"desc": "Bug 1310127 - Part 17: Use MOZ_MUST_USE in netwerk/protocol/http r=smaug\n\nMozReview-Commit-ID: 5gvVZtsa3yS",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 328,
"line": "        rv = httpChannelInternal-\u003eGetProxyURI(getter_AddRefs(uri));\n",
"lineno": 512,
"revdate": [1482205772.0, -28800]
}, {
"node": "828e8f37ba26aca276952462baa176fc02e79975",
"author": "Wei-Cheng Pan \u003cwpan@mozilla.com\u003e",
"desc": "Bug 1310127 - Part 17: Use MOZ_MUST_USE in netwerk/protocol/http r=smaug\n\nMozReview-Commit-ID: 5gvVZtsa3yS",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 329,
"line": "        MOZ_ASSERT(NS_SUCCEEDED(rv));\n",
"lineno": 513,
"revdate": [1482205772.0, -28800]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 305,
"line": "      }\n",
"lineno": 514,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 306,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 515,
"revdate": [1463479451.0, -7200]
}, {
"node": "acc983ca0dec710088764398caba4eb10512de21",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188028 - Use channel-\u003eascynOpen2 in dom/security/nsCSPContext.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 242,
"line": "      break;\n",
"lineno": 516,
"revdate": [1438023476.0, 25200]
}, {
"node": "acc983ca0dec710088764398caba4eb10512de21",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188028 - Use channel-\u003eascynOpen2 in dom/security/nsCSPContext.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 243,
"line": "    }\n",
"lineno": 517,
"revdate": [1438023476.0, 25200]
}, {
"node": "acc983ca0dec710088764398caba4eb10512de21",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188028 - Use channel-\u003eascynOpen2 in dom/security/nsCSPContext.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 244,
"line": "\n",
"lineno": 518,
"revdate": [1438023476.0, 25200]
}, {
"node": "bc7aa1e7670fcf9190ecc90c31171d41071f63b7",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192333 - Use channel-\u003eascynOpen2 in dom/xslt/xslt/txMozillaStylesheetCompiler.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 212,
"line": "    case nsIContentPolicy::TYPE_CSP_REPORT: {\n",
"lineno": 519,
"revdate": [1443483287.0, 25200]
}, {
"node": "acc983ca0dec710088764398caba4eb10512de21",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1188028 - Use channel-\u003eascynOpen2 in dom/security/nsCSPContext.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 246,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 520,
"revdate": [1438023476.0, 25200]
}, {
"node": "bc7aa1e7670fcf9190ecc90c31171d41071f63b7",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192333 - Use channel-\u003eascynOpen2 in dom/xslt/xslt/txMozillaStylesheetCompiler.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 214,
"line": "      break;\n",
"lineno": 521,
"revdate": [1443483287.0, 25200]
}, {
"node": "bc7aa1e7670fcf9190ecc90c31171d41071f63b7",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192333 - Use channel-\u003eascynOpen2 in dom/xslt/xslt/txMozillaStylesheetCompiler.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 215,
"line": "    }\n",
"lineno": 522,
"revdate": [1443483287.0, 25200]
}, {
"node": "bc7aa1e7670fcf9190ecc90c31171d41071f63b7",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192333 - Use channel-\u003eascynOpen2 in dom/xslt/xslt/txMozillaStylesheetCompiler.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 216,
"line": "\n",
"lineno": 523,
"revdate": [1443483287.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 159,
"line": "    case nsIContentPolicy::TYPE_XSLT: {\n",
"lineno": 524,
"revdate": [1438054757.0, 25200]
}, {
"node": "bc7aa1e7670fcf9190ecc90c31171d41071f63b7",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1192333 - Use channel-\u003eascynOpen2 in dom/xslt/xslt/txMozillaStylesheetCompiler.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 218,
"line": "      mimeTypeGuess = NS_LITERAL_CSTRING(\"application/xml\");\n",
"lineno": 525,
"revdate": [1443483287.0, 25200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 360,
"line": "#ifdef DEBUG\n",
"lineno": 526,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 361,
"line": "      {\n",
"lineno": 527,
"revdate": [1504627267.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 479,
"line": "        nsCOMPtr\u003cnsINode\u003e node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 528,
"revdate": [1522318583.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 444,
"line": "        MOZ_ASSERT(!node || node-\u003eNodeType() == nsINode::DOCUMENT_NODE,\n",
"lineno": 529,
"revdate": [1517285453.0, 18000]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 364,
"line": "                   \"type_xslt requires requestingContext of type Document\");\n",
"lineno": 530,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 365,
"line": "      }\n",
"lineno": 531,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 366,
"line": "#endif\n",
"lineno": 532,
"revdate": [1504627267.0, -7200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 161,
"line": "      break;\n",
"lineno": 533,
"revdate": [1438054757.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 162,
"line": "    }\n",
"lineno": 534,
"revdate": [1438054757.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 163,
"line": "\n",
"lineno": 535,
"revdate": [1438054757.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 164,
"line": "    case nsIContentPolicy::TYPE_BEACON: {\n",
"lineno": 536,
"revdate": [1438054757.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 165,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 537,
"revdate": [1438054757.0, 25200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 373,
"line": "#ifdef DEBUG\n",
"lineno": 538,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 374,
"line": "      {\n",
"lineno": 539,
"revdate": [1504627267.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 491,
"line": "        nsCOMPtr\u003cnsINode\u003e node = aLoadInfo-\u003eLoadingNode();\n",
"lineno": 540,
"revdate": [1522318583.0, -7200]
}, {
"node": "49142eb85e3c75c3e2b7bc3db147932042187232",
"author": "Boris Zbarsky \u003cbzbarsky@mit.edu\u003e",
"desc": "Bug 1432186 part 19.  Remove the nsIDOMNode::*_NODE constants.  r=mccr8\n\nMozReview-Commit-ID: KvKjeKIOB9K",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 457,
"line": "        MOZ_ASSERT(!node || node-\u003eNodeType() == nsINode::DOCUMENT_NODE,\n",
"lineno": 541,
"revdate": [1517285453.0, 18000]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 377,
"line": "                   \"type_beacon requires requestingContext of type Document\");\n",
"lineno": 542,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 378,
"line": "      }\n",
"lineno": 543,
"revdate": [1504627267.0, -7200]
}, {
"node": "807e9eadd5c1a63419ae951b95f8e043d573b458",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1331740: Pass correct context for TYPE_DOCUMENT loads within docshell. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 379,
"line": "#endif\n",
"lineno": 544,
"revdate": [1504627267.0, -7200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 170,
"line": "      break;\n",
"lineno": 545,
"revdate": [1438054757.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 171,
"line": "    }\n",
"lineno": 546,
"revdate": [1438054757.0, 25200]
}, {
"node": "a110782901107a9c9d7c9a38120554df3a71336b",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182537 - Use channel-\u003eascynOpen2 in dom/base/Navigator.cpp (r=sicking,bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 172,
"line": "\n",
"lineno": 547,
"revdate": [1438054757.0, 25200]
}, {
"node": "82ab1c1e478dabd3ed9f18f00c0956ef8976c8d6",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1195167 part 5: Make FetchDriver use AsyncOpen2. r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 252,
"line": "    case nsIContentPolicy::TYPE_FETCH: {\n",
"lineno": 548,
"revdate": [1445304276.0, 25200]
}, {
"node": "82ab1c1e478dabd3ed9f18f00c0956ef8976c8d6",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1195167 part 5: Make FetchDriver use AsyncOpen2. r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 253,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 549,
"revdate": [1445304276.0, 25200]
}, {
"node": "82ab1c1e478dabd3ed9f18f00c0956ef8976c8d6",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1195167 part 5: Make FetchDriver use AsyncOpen2. r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 255,
"line": "      break;\n",
"lineno": 550,
"revdate": [1445304276.0, 25200]
}, {
"node": "82ab1c1e478dabd3ed9f18f00c0956ef8976c8d6",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1195167 part 5: Make FetchDriver use AsyncOpen2. r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 256,
"line": "    }\n",
"lineno": 551,
"revdate": [1445304276.0, 25200]
}, {
"node": "82ab1c1e478dabd3ed9f18f00c0956ef8976c8d6",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1195167 part 5: Make FetchDriver use AsyncOpen2. r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 257,
"line": "\n",
"lineno": 552,
"revdate": [1445304276.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 162,
"line": "    case nsIContentPolicy::TYPE_IMAGESET: {\n",
"lineno": 553,
"revdate": [1437845362.0, 25200]
}, {
"node": "65911fba80692730b42cd6bf474520c1568b69a6",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1206961 - Use channel-\u003eAsyncOpen2() for imageLoader; Remove security checks from callsites (r=bz)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 340,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 554,
"revdate": [1461778873.0, -7200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 158,
"line": "      break;\n",
"lineno": 555,
"revdate": [1437358331.0, 25200]
}, {
"node": "7f458c4bd2713cfaea02eddcb48470d535c9b815",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1182540 - Use channel-\u003eascynOpen2 in dom/html/HTMLTrackElement.cpp (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 165,
"line": "    }\n",
"lineno": 556,
"revdate": [1437845362.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 159,
"line": "\n",
"lineno": 557,
"revdate": [1437358331.0, 25200]
}, {
"node": "a80b31406b47c4b8dc6154f89758a16f8faa5ce3",
"author": "Marcos Caceres \u003cmarcos@marcosc.com\u003e",
"desc": "Bug 1250048 - CSP manifest-src doesn't override default-src. r=ckerschb,bkelly,ehsan\n\nMozReview-Commit-ID: Ceu3sYUcML4",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 299,
"line": "    case nsIContentPolicy::TYPE_WEB_MANIFEST: {\n",
"lineno": 558,
"revdate": [1460063589.0, 25200]
}, {
"node": "a80b31406b47c4b8dc6154f89758a16f8faa5ce3",
"author": "Marcos Caceres \u003cmarcos@marcosc.com\u003e",
"desc": "Bug 1250048 - CSP manifest-src doesn't override default-src. r=ckerschb,bkelly,ehsan\n\nMozReview-Commit-ID: Ceu3sYUcML4",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 300,
"line": "      mimeTypeGuess = NS_LITERAL_CSTRING(\"application/manifest+json\");\n",
"lineno": 559,
"revdate": [1460063589.0, 25200]
}, {
"node": "a80b31406b47c4b8dc6154f89758a16f8faa5ce3",
"author": "Marcos Caceres \u003cmarcos@marcosc.com\u003e",
"desc": "Bug 1250048 - CSP manifest-src doesn't override default-src. r=ckerschb,bkelly,ehsan\n\nMozReview-Commit-ID: Ceu3sYUcML4",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 302,
"line": "      break;\n",
"lineno": 560,
"revdate": [1460063589.0, 25200]
}, {
"node": "a80b31406b47c4b8dc6154f89758a16f8faa5ce3",
"author": "Marcos Caceres \u003cmarcos@marcosc.com\u003e",
"desc": "Bug 1250048 - CSP manifest-src doesn't override default-src. r=ckerschb,bkelly,ehsan\n\nMozReview-Commit-ID: Ceu3sYUcML4",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 303,
"line": "    }\n",
"lineno": 561,
"revdate": [1460063589.0, 25200]
}, {
"node": "a80b31406b47c4b8dc6154f89758a16f8faa5ce3",
"author": "Marcos Caceres \u003cmarcos@marcosc.com\u003e",
"desc": "Bug 1250048 - CSP manifest-src doesn't override default-src. r=ckerschb,bkelly,ehsan\n\nMozReview-Commit-ID: Ceu3sYUcML4",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 304,
"line": "\n",
"lineno": 562,
"revdate": [1460063589.0, 25200]
}, {
"node": "6b4cebf12e3fd1d1603f03b84a6cfdeb200204fc",
"author": "Andrea Marchesini \u003camarchesini@mozilla.com\u003e",
"desc": "Bug 1398229 - Save-link-as feature should use the loading principal - part 3 - implementation of nsIContentPolicy.TYPE_SAVE_AS_DOWNLOAD, r=ckerschb, r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 483,
"line": "    case nsIContentPolicy::TYPE_SAVEAS_DOWNLOAD: {\n",
"lineno": 563,
"revdate": [1510831621.0, -3600]
}, {
"node": "6b4cebf12e3fd1d1603f03b84a6cfdeb200204fc",
"author": "Andrea Marchesini \u003camarchesini@mozilla.com\u003e",
"desc": "Bug 1398229 - Save-link-as feature should use the loading principal - part 3 - implementation of nsIContentPolicy.TYPE_SAVE_AS_DOWNLOAD, r=ckerschb, r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 484,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 564,
"revdate": [1510831621.0, -3600]
}, {
"node": "6b4cebf12e3fd1d1603f03b84a6cfdeb200204fc",
"author": "Andrea Marchesini \u003camarchesini@mozilla.com\u003e",
"desc": "Bug 1398229 - Save-link-as feature should use the loading principal - part 3 - implementation of nsIContentPolicy.TYPE_SAVE_AS_DOWNLOAD, r=ckerschb, r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 486,
"line": "      break;\n",
"lineno": 565,
"revdate": [1510831621.0, -3600]
}, {
"node": "6b4cebf12e3fd1d1603f03b84a6cfdeb200204fc",
"author": "Andrea Marchesini \u003camarchesini@mozilla.com\u003e",
"desc": "Bug 1398229 - Save-link-as feature should use the loading principal - part 3 - implementation of nsIContentPolicy.TYPE_SAVE_AS_DOWNLOAD, r=ckerschb, r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 487,
"line": "    }\n",
"lineno": 566,
"revdate": [1510831621.0, -3600]
}, {
"node": "6b4cebf12e3fd1d1603f03b84a6cfdeb200204fc",
"author": "Andrea Marchesini \u003camarchesini@mozilla.com\u003e",
"desc": "Bug 1398229 - Save-link-as feature should use the loading principal - part 3 - implementation of nsIContentPolicy.TYPE_SAVE_AS_DOWNLOAD, r=ckerschb, r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 488,
"line": "\n",
"lineno": 567,
"revdate": [1510831621.0, -3600]
}, {
"node": "ae5f6843bb631a32869fa29beb24a36498ed205a",
"author": "Dave Townsend \u003cdtownsend@oxymoronical.com\u003e",
"desc": "Bug 1448500: Add speculative request content policy type. r=bz, r=kmag\n\nAdds a new TYPE_SPECULATIVE to nsIContentPolicy uses it as the type for\nspeculative connection channels from the IO service. I believe I've added it to\nall the content policies in tree to make sure it behaves the same as TYPE_OTHER\nused to.\n\nThe webextension test shows that the webextension proxy API sees speculative\nlookups requested through the IO service.\n\nMozReview-Commit-ID: DQ4Kq0xdUOD",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 519,
"line": "    case nsIContentPolicy::TYPE_SPECULATIVE: {\n",
"lineno": 568,
"revdate": [1521844028.0, 25200]
}, {
"node": "ae5f6843bb631a32869fa29beb24a36498ed205a",
"author": "Dave Townsend \u003cdtownsend@oxymoronical.com\u003e",
"desc": "Bug 1448500: Add speculative request content policy type. r=bz, r=kmag\n\nAdds a new TYPE_SPECULATIVE to nsIContentPolicy uses it as the type for\nspeculative connection channels from the IO service. I believe I've added it to\nall the content policies in tree to make sure it behaves the same as TYPE_OTHER\nused to.\n\nThe webextension test shows that the webextension proxy API sees speculative\nlookups requested through the IO service.\n\nMozReview-Commit-ID: DQ4Kq0xdUOD",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 520,
"line": "      mimeTypeGuess = EmptyCString();\n",
"lineno": 569,
"revdate": [1521844028.0, 25200]
}, {
"node": "ae5f6843bb631a32869fa29beb24a36498ed205a",
"author": "Dave Townsend \u003cdtownsend@oxymoronical.com\u003e",
"desc": "Bug 1448500: Add speculative request content policy type. r=bz, r=kmag\n\nAdds a new TYPE_SPECULATIVE to nsIContentPolicy uses it as the type for\nspeculative connection channels from the IO service. I believe I've added it to\nall the content policies in tree to make sure it behaves the same as TYPE_OTHER\nused to.\n\nThe webextension test shows that the webextension proxy API sees speculative\nlookups requested through the IO service.\n\nMozReview-Commit-ID: DQ4Kq0xdUOD",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 521,
"line": "      break;\n",
"lineno": 570,
"revdate": [1521844028.0, 25200]
}, {
"node": "ae5f6843bb631a32869fa29beb24a36498ed205a",
"author": "Dave Townsend \u003cdtownsend@oxymoronical.com\u003e",
"desc": "Bug 1448500: Add speculative request content policy type. r=bz, r=kmag\n\nAdds a new TYPE_SPECULATIVE to nsIContentPolicy uses it as the type for\nspeculative connection channels from the IO service. I believe I've added it to\nall the content policies in tree to make sure it behaves the same as TYPE_OTHER\nused to.\n\nThe webextension test shows that the webextension proxy API sees speculative\nlookups requested through the IO service.\n\nMozReview-Commit-ID: DQ4Kq0xdUOD",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 522,
"line": "    }\n",
"lineno": 571,
"revdate": [1521844028.0, 25200]
}, {
"node": "ae5f6843bb631a32869fa29beb24a36498ed205a",
"author": "Dave Townsend \u003cdtownsend@oxymoronical.com\u003e",
"desc": "Bug 1448500: Add speculative request content policy type. r=bz, r=kmag\n\nAdds a new TYPE_SPECULATIVE to nsIContentPolicy uses it as the type for\nspeculative connection channels from the IO service. I believe I've added it to\nall the content policies in tree to make sure it behaves the same as TYPE_OTHER\nused to.\n\nThe webextension test shows that the webextension proxy API sees speculative\nlookups requested through the IO service.\n\nMozReview-Commit-ID: DQ4Kq0xdUOD",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 523,
"line": "\n",
"lineno": 572,
"revdate": [1521844028.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 160,
"line": "    default:\n",
"lineno": 573,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 161,
"line": "      // nsIContentPolicy::TYPE_INVALID\n",
"lineno": 574,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 162,
"line": "      MOZ_ASSERT(false, \"can not perform security check without a valid contentType\");\n",
"lineno": 575,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 163,
"line": "  }\n",
"lineno": 576,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 164,
"line": "\n",
"lineno": 577,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 165,
"line": "  int16_t shouldLoad = nsIContentPolicy::ACCEPT;\n",
"lineno": 578,
"revdate": [1437358331.0, 25200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 525,
"line": "  rv = NS_CheckContentLoadPolicy(uri,\n",
"lineno": 579,
"revdate": [1522318583.0, -7200]
}, {
"node": "22d7899c79f85237e8590843efd729e69996deb2",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1439713 - Change nsIContentPolicy shouldLoad to take an \u003curi, loadInfo\u003e pair instead of the various args. r=bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 526,
"line": "                                 aLoadInfo,\n",
"lineno": 580,
"revdate": [1522318583.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 363,
"line": "                                 mimeTypeGuess,\n",
"lineno": 581,
"revdate": [1463479451.0, -7200]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 365,
"line": "                                 &shouldLoad,\n",
"lineno": 582,
"revdate": [1463479451.0, -7200]
}, {
"node": "185f5128f55610ba8718caed0d2597ad8c33e563",
"author": "Andrew McCreight \u003ccontinuation@gmail.com\u003e",
"desc": "Bug 1379786, part 4 - Use GetIsSystemPrincipal() method instead of going through secman in CHECK_PRINCIPAL_AND_DATA. r=mrbkap\n\nMozReview-Commit-ID: INBsjjxbXZz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 399,
"line": "                                 nsContentUtils::GetContentPolicy());\n",
"lineno": 583,
"revdate": [1499724003.0, 25200]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 400,
"line": "\n",
"lineno": 584,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 401,
"line": "  if (NS_FAILED(rv) || NS_CP_REJECTED(shouldLoad)) {\n",
"lineno": 585,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 402,
"line": "    if ((NS_SUCCEEDED(rv) && shouldLoad == nsIContentPolicy::REJECT_TYPE) &&\n",
"lineno": 586,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 403,
"line": "        (contentPolicyType == nsIContentPolicy::TYPE_DOCUMENT ||\n",
"lineno": 587,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 404,
"line": "         contentPolicyType == nsIContentPolicy::TYPE_SUBDOCUMENT)) {\n",
"lineno": 588,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 405,
"line": "      // for docshell loads we might have to return SHOW_ALT.\n",
"lineno": 589,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 406,
"line": "      return NS_ERROR_CONTENT_BLOCKED_SHOW_ALT;\n",
"lineno": 590,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 407,
"line": "    }\n",
"lineno": 591,
"revdate": [1483473570.0, -3600]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 177,
"line": "    return NS_ERROR_CONTENT_BLOCKED;\n",
"lineno": 592,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 178,
"line": "  }\n",
"lineno": 593,
"revdate": [1437358331.0, 25200]
}, {
"node": "380eebfd9d8928b656236d08e535fe528258e947",
"author": "Kate McKinley \u003ckmckinley@mozilla.com\u003e",
"desc": "Bug 1246540 - HSTS Priming Proof of Concept. r=ckerschb, r=mayhemer, r=jld, r=smaug, r=dkeeler, r=jmaher, p=ally\n\nHSTS priming changes the order of mixed-content blocking and HSTS\nupgrades, and adds a priming request to check if a mixed-content load is\naccesible over HTTPS and the server supports upgrading via the\nStrict-Transport-Security header.\n\nEvery call site that uses AsyncOpen2 passes through the mixed-content\nblocker, and has a LoadInfo. If the mixed-content blocker marks the load as\nneeding HSTS priming, nsHttpChannel will build and send an HSTS priming\nrequest on the same URI with the scheme upgraded to HTTPS. If the server\nallows the upgrade, then channel performs an internal redirect to the HTTPS URI,\notherwise use the result of mixed-content blocker to allow or block the\nload.\n\nnsISiteSecurityService adds an optional boolean out parameter to\ndetermine if the HSTS state is already cached for negative assertions.\nIf the host has been probed within the previous 24 hours, no HSTS\npriming check will be sent.\n\nMozReview-Commit-ID: ES1JruCtDdX",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 386,
"line": "\n",
"lineno": 594,
"revdate": [1474990020.0, 14400]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 179,
"line": "  return NS_OK;\n",
"lineno": 595,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 180,
"line": "}\n",
"lineno": 596,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 181,
"line": "\n",
"lineno": 597,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 182,
"line": "/*\n",
"lineno": 598,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 183,
"line": " * Based on the security flags provided in the loadInfo of the channel,\n",
"lineno": 599,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 184,
"line": " * doContentSecurityCheck() performs the following content security checks\n",
"lineno": 600,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 185,
"line": " * before opening the channel:\n",
"lineno": 601,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 186,
"line": " *\n",
"lineno": 602,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 187,
"line": " * (1) Same Origin Policy Check (if applicable)\n",
"lineno": 603,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 188,
"line": " * (2) Allow Cross Origin but perform sanity checks whether a principal\n",
"lineno": 604,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 189,
"line": " *     is allowed to access the following URL.\n",
"lineno": 605,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 190,
"line": " * (3) Perform CORS check (if applicable)\n",
"lineno": 606,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 191,
"line": " * (4) ContentPolicy checks (Content-Security-Policy, Mixed Content, ...)\n",
"lineno": 607,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 192,
"line": " *\n",
"lineno": 608,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 193,
"line": " * @param aChannel\n",
"lineno": 609,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 194,
"line": " *    The channel to perform the security checks on.\n",
"lineno": 610,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 195,
"line": " * @param aInAndOutListener\n",
"lineno": 611,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 196,
"line": " *    The streamListener that is passed to channel-\u003eAsyncOpen2() that is now potentially\n",
"lineno": 612,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 197,
"line": " *    wrappend within nsCORSListenerProxy() and becomes the corsListener that now needs\n",
"lineno": 613,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 198,
"line": " *    to be set as new streamListener on the channel.\n",
"lineno": 614,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 199,
"line": " */\n",
"lineno": 615,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 200,
"line": "nsresult\n",
"lineno": 616,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 201,
"line": "nsContentSecurityManager::doContentSecurityCheck(nsIChannel* aChannel,\n",
"lineno": 617,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 202,
"line": "                                                 nsCOMPtr\u003cnsIStreamListener\u003e& aInAndOutListener)\n",
"lineno": 618,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 203,
"line": "{\n",
"lineno": 619,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 204,
"line": "  NS_ENSURE_ARG(aChannel);\n",
"lineno": 620,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 205,
"line": "  nsCOMPtr\u003cnsILoadInfo\u003e loadInfo = aChannel-\u003eGetLoadInfo();\n",
"lineno": 621,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 206,
"line": "\n",
"lineno": 622,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 207,
"line": "  if (!loadInfo) {\n",
"lineno": 623,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 208,
"line": "    MOZ_ASSERT(false, \"channel needs to have loadInfo to perform security checks\");\n",
"lineno": 624,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 209,
"line": "    return NS_ERROR_UNEXPECTED;\n",
"lineno": 625,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 210,
"line": "  }\n",
"lineno": 626,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 211,
"line": "\n",
"lineno": 627,
"revdate": [1437358331.0, 25200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 347,
"line": "  // if dealing with a redirected channel then we have already installed\n",
"lineno": 628,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 348,
"line": "  // streamlistener and redirect proxies and so we are done.\n",
"lineno": 629,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 349,
"line": "  if (loadInfo-\u003eGetInitialSecurityCheckDone()) {\n",
"lineno": 630,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 350,
"line": "    return NS_OK;\n",
"lineno": 631,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 351,
"line": "  }\n",
"lineno": 632,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 352,
"line": "\n",
"lineno": 633,
"revdate": [1449444794.0, 18000]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 212,
"line": "  // make sure that only one of the five security flags is set in the loadinfo\n",
"lineno": 634,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 213,
"line": "  // e.g. do not require same origin and allow cross origin at the same time\n",
"lineno": 635,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 214,
"line": "  nsresult rv = ValidateSecurityFlags(loadInfo);\n",
"lineno": 636,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 215,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 637,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 216,
"line": "\n",
"lineno": 638,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 228,
"line": "  // since aChannel was openend using asyncOpen2() we have to make sure\n",
"lineno": 639,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 229,
"line": "  // that redirects of that channel also get openend using asyncOpen2()\n",
"lineno": 640,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 230,
"line": "  // please note that some implementations of ::AsyncOpen2 might already\n",
"lineno": 641,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 231,
"line": "  // have set that flag to true (e.g. nsViewSourceChannel) in which case\n",
"lineno": 642,
"revdate": [1437358331.0, 25200]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 232,
"line": "  // we just set the flag again.\n",
"lineno": 643,
"revdate": [1437358331.0, 25200]
}, {
"node": "ef4aaae8d79bb6ca37b88d3440db1247fa10e260",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1294620 - Use infallible XPIDL attribute getters more. r=erahm.\n\nThis makes a lot of code more compact, and also avoids some redundant nsresult\nchecks.\n\nThe patch also removes a handful of redundant checks on infallible setters.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 433,
"line": "  loadInfo-\u003eSetEnforceSecurity(true);\n",
"lineno": 644,
"revdate": [1470979169.0, -36000]
}, {
"node": "1d919946baac36b6137f567632b97fd42518870e",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1143922 - Add AsyncOpen2 to nsIChannel and perform security checks when opening a channel - securitymanager (r=sicking,tanvi)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 235,
"line": "\n",
"lineno": 645,
"revdate": [1437358331.0, 25200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 366,
"line": "  if (loadInfo-\u003eGetSecurityMode() == nsILoadInfo::SEC_REQUIRE_CORS_DATA_INHERITS) {\n",
"lineno": 646,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 367,
"line": "    rv = DoCORSChecks(aChannel, loadInfo, aInAndOutListener);\n",
"lineno": 647,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 368,
"line": "    NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 648,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 369,
"line": "  }\n",
"lineno": 649,
"revdate": [1449444794.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 361,
"line": "\n",
"lineno": 650,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 362,
"line": "  rv = CheckChannel(aChannel);\n",
"lineno": 651,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 363,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 652,
"revdate": [1449444795.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 374,
"line": "\n",
"lineno": 653,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 379,
"line": "  // Perform all ContentPolicy checks (MixedContent, CSP, ...)\n",
"lineno": 654,
"revdate": [1449444794.0, 18000]
}, {
"node": "9ad3bd17f3e929697a9e2d8ebacb37e69f648bda",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1271198 - Convert Websockets to use AsyncOpen2(). r=jduell",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 433,
"line": "  rv = DoContentSecurityChecks(aChannel, loadInfo);\n",
"lineno": 655,
"revdate": [1463479451.0, -7200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 381,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 656,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 382,
"line": "\n",
"lineno": 657,
"revdate": [1449444794.0, 18000]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 658,
"line": "  // Apply this after CSP to match Chrome.\n",
"lineno": 658,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 659,
"line": "  rv = CheckFTPSubresourceLoad(aChannel);\n",
"lineno": 659,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 660,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 660,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 661,
"line": "\n",
"lineno": 661,
"revdate": [1522967222.0, -7200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 383,
"line": "  // now lets set the initalSecurityFlag for subsequent calls\n",
"lineno": 662,
"revdate": [1449444794.0, 18000]
}, {
"node": "ef4aaae8d79bb6ca37b88d3440db1247fa10e260",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1294620 - Use infallible XPIDL attribute getters more. r=erahm.\n\nThis makes a lot of code more compact, and also avoids some redundant nsresult\nchecks.\n\nThe patch also removes a handful of redundant checks on infallible setters.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 448,
"line": "  loadInfo-\u003eSetInitialSecurityCheckDone(true);\n",
"lineno": 663,
"revdate": [1470979169.0, -36000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 386,
"line": "\n",
"lineno": 664,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 387,
"line": "  // all security checks passed - lets allow the load\n",
"lineno": 665,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 388,
"line": "  return NS_OK;\n",
"lineno": 666,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 389,
"line": "}\n",
"lineno": 667,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 390,
"line": "\n",
"lineno": 668,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 391,
"line": "NS_IMETHODIMP\n",
"lineno": 669,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 392,
"line": "nsContentSecurityManager::AsyncOnChannelRedirect(nsIChannel* aOldChannel,\n",
"lineno": 670,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 393,
"line": "                                                 nsIChannel* aNewChannel,\n",
"lineno": 671,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 394,
"line": "                                                 uint32_t aRedirFlags,\n",
"lineno": 672,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 395,
"line": "                                                 nsIAsyncVerifyRedirectCallback *aCb)\n",
"lineno": 673,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 396,
"line": "{\n",
"lineno": 674,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 397,
"line": "  nsCOMPtr\u003cnsILoadInfo\u003e loadInfo = aOldChannel-\u003eGetLoadInfo();\n",
"lineno": 675,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 398,
"line": "  // Are we enforcing security using LoadInfo?\n",
"lineno": 676,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 399,
"line": "  if (loadInfo && loadInfo-\u003eGetEnforceSecurity()) {\n",
"lineno": 677,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 400,
"line": "    nsresult rv = CheckChannel(aNewChannel);\n",
"lineno": 678,
"revdate": [1449444794.0, 18000]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 679,
"line": "    if (NS_SUCCEEDED(rv)) {\n",
"lineno": 679,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 680,
"line": "      rv = CheckFTPSubresourceLoad(aNewChannel);\n",
"lineno": 680,
"revdate": [1522967222.0, -7200]
}, {
"node": "b2c0699b9bd405300986bc26f256e8bb9c0c53a7",
"author": "Tom Schuster \u003cevilpies@gmail.com\u003e",
"desc": "Bug 1404744 - Check for FTP subresource after applying CSP. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 681,
"line": "    }\n",
"lineno": 681,
"revdate": [1522967222.0, -7200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 401,
"line": "    if (NS_FAILED(rv)) {\n",
"lineno": 682,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 402,
"line": "      aOldChannel-\u003eCancel(rv);\n",
"lineno": 683,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 403,
"line": "      return rv;\n",
"lineno": 684,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 404,
"line": "    }\n",
"lineno": 685,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 405,
"line": "  }\n",
"lineno": 686,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 406,
"line": "\n",
"lineno": 687,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 407,
"line": "  // Also verify that the redirecting server is allowed to redirect to the\n",
"lineno": 688,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 408,
"line": "  // given URI\n",
"lineno": 689,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 409,
"line": "  nsCOMPtr\u003cnsIPrincipal\u003e oldPrincipal;\n",
"lineno": 690,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 410,
"line": "  nsContentUtils::GetSecurityManager()-\u003e\n",
"lineno": 691,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 411,
"line": "    GetChannelResultPrincipal(aOldChannel, getter_AddRefs(oldPrincipal));\n",
"lineno": 692,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 412,
"line": "\n",
"lineno": 693,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 413,
"line": "  nsCOMPtr\u003cnsIURI\u003e newURI;\n",
"lineno": 694,
"revdate": [1449444794.0, 18000]
}, {
"node": "5c8f80d7790924ee01d3473bf905985826dc738e",
"author": "Honza Bambas \u003chonzab.moz@firemni.cz\u003e",
"desc": "Bug 1367814 - Let nsContentSecurityManager check if a redirect may load against the target channel's final URI, r=bz\nThis allows protocol handlers that load data from a privileged URI (chrome/file/jar) to make the channel's principal\nas well as the redirect to look like (to) an unprivileged URI or a URI allowed to load to function correctly.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 512,
"line": "  Unused \u003c\u003c NS_GetFinalChannelURI(aNewChannel, getter_AddRefs(newURI));\n",
"lineno": 695,
"revdate": [1499917860.0, -7200]
}, {
"node": "5c8f80d7790924ee01d3473bf905985826dc738e",
"author": "Honza Bambas \u003chonzab.moz@firemni.cz\u003e",
"desc": "Bug 1367814 - Let nsContentSecurityManager check if a redirect may load against the target channel's final URI, r=bz\nThis allows protocol handlers that load data from a privileged URI (chrome/file/jar) to make the channel's principal\nas well as the redirect to look like (to) an unprivileged URI or a URI allowed to load to function correctly.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 513,
"line": "  NS_ENSURE_STATE(oldPrincipal && newURI);\n",
"lineno": 696,
"revdate": [1499917860.0, -7200]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 419,
"line": "\n",
"lineno": 697,
"revdate": [1449444794.0, 18000]
}, {
"node": "bb6f3f1ffb411c7adeb7403264999a4600919b40",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1428793: Block insecure redirects to data: URIs. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 609,
"line": "  // Do not allow insecure redirects to data: URIs\n",
"lineno": 698,
"revdate": [1516697867.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 660,
"line": "  if (!AllowInsecureRedirectToDataURI(aNewChannel)) {\n",
"lineno": 699,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 661,
"line": "    // cancel the old channel and return an error\n",
"lineno": 700,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 662,
"line": "    aOldChannel-\u003eCancel(NS_ERROR_CONTENT_BLOCKED);\n",
"lineno": 701,
"revdate": [1518979972.0, -3600]
}, {
"node": "416adbc7c8e71938dd28da6cecd92c4930238090",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1434357: Exempt Web Extensions from insecure redirects to data: URIs. r=kmag,mayhemer",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 663,
"line": "    return NS_ERROR_CONTENT_BLOCKED;\n",
"lineno": 702,
"revdate": [1518979972.0, -3600]
}, {
"node": "bb6f3f1ffb411c7adeb7403264999a4600919b40",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1428793: Block insecure redirects to data: URIs. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 637,
"line": "  }\n",
"lineno": 703,
"revdate": [1516697867.0, -3600]
}, {
"node": "bb6f3f1ffb411c7adeb7403264999a4600919b40",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1428793: Block insecure redirects to data: URIs. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 638,
"line": "\n",
"lineno": 704,
"revdate": [1516697867.0, -3600]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 420,
"line": "  const uint32_t flags =\n",
"lineno": 705,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 421,
"line": "      nsIScriptSecurityManager::LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT |\n",
"lineno": 706,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 422,
"line": "      nsIScriptSecurityManager::DISALLOW_SCRIPT;\n",
"lineno": 707,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 423,
"line": "  nsresult rv = nsContentUtils::GetSecurityManager()-\u003e\n",
"lineno": 708,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 424,
"line": "    CheckLoadURIWithPrincipal(oldPrincipal, newURI, flags);\n",
"lineno": 709,
"revdate": [1449444794.0, 18000]
}, {
"node": "380eebfd9d8928b656236d08e535fe528258e947",
"author": "Kate McKinley \u003ckmckinley@mozilla.com\u003e",
"desc": "Bug 1246540 - HSTS Priming Proof of Concept. r=ckerschb, r=mayhemer, r=jld, r=smaug, r=dkeeler, r=jmaher, p=ally\n\nHSTS priming changes the order of mixed-content blocking and HSTS\nupgrades, and adds a priming request to check if a mixed-content load is\naccesible over HTTPS and the server supports upgrading via the\nStrict-Transport-Security header.\n\nEvery call site that uses AsyncOpen2 passes through the mixed-content\nblocker, and has a LoadInfo. If the mixed-content blocker marks the load as\nneeding HSTS priming, nsHttpChannel will build and send an HSTS priming\nrequest on the same URI with the scheme upgraded to HTTPS. If the server\nallows the upgrade, then channel performs an internal redirect to the HTTPS URI,\notherwise use the result of mixed-content blocker to allow or block the\nload.\n\nnsISiteSecurityService adds an optional boolean out parameter to\ndetermine if the HSTS state is already cached for negative assertions.\nIf the host has been probed within the previous 24 hours, no HSTS\npriming check will be sent.\n\nMozReview-Commit-ID: ES1JruCtDdX",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 502,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 710,
"revdate": [1474990020.0, 14400]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 430,
"line": "\n",
"lineno": 711,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 431,
"line": "  aCb-\u003eOnRedirectVerifyCallback(NS_OK);\n",
"lineno": 712,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 432,
"line": "  return NS_OK;\n",
"lineno": 713,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 433,
"line": "}\n",
"lineno": 714,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 434,
"line": "\n",
"lineno": 715,
"revdate": [1449444794.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 420,
"line": "static void\n",
"lineno": 716,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 421,
"line": "AddLoadFlags(nsIRequest *aRequest, nsLoadFlags aNewFlags)\n",
"lineno": 717,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 422,
"line": "{\n",
"lineno": 718,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 423,
"line": "  nsLoadFlags flags;\n",
"lineno": 719,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 424,
"line": "  aRequest-\u003eGetLoadFlags(&flags);\n",
"lineno": 720,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 425,
"line": "  flags |= aNewFlags;\n",
"lineno": 721,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 426,
"line": "  aRequest-\u003eSetLoadFlags(flags);\n",
"lineno": 722,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 427,
"line": "}\n",
"lineno": 723,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 428,
"line": "\n",
"lineno": 724,
"revdate": [1449444795.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 435,
"line": "/*\n",
"lineno": 725,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 436,
"line": " * Check that this channel passes all security checks. Returns an error code\n",
"lineno": 726,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 437,
"line": " * if this requesst should not be permitted.\n",
"lineno": 727,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 438,
"line": " */\n",
"lineno": 728,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 439,
"line": "nsresult\n",
"lineno": 729,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 440,
"line": "nsContentSecurityManager::CheckChannel(nsIChannel* aChannel)\n",
"lineno": 730,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 441,
"line": "{\n",
"lineno": 731,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 442,
"line": "  nsCOMPtr\u003cnsILoadInfo\u003e loadInfo = aChannel-\u003eGetLoadInfo();\n",
"lineno": 732,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 443,
"line": "  MOZ_ASSERT(loadInfo);\n",
"lineno": 733,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 444,
"line": "\n",
"lineno": 734,
"revdate": [1449444794.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 439,
"line": "  nsCOMPtr\u003cnsIURI\u003e uri;\n",
"lineno": 735,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 440,
"line": "  nsresult rv = NS_GetFinalChannelURI(aChannel, getter_AddRefs(uri));\n",
"lineno": 736,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 441,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 737,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 442,
"line": "\n",
"lineno": 738,
"revdate": [1449444795.0, 18000]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 555,
"line": "  nsContentPolicyType contentPolicyType =\n",
"lineno": 739,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 556,
"line": "    loadInfo-\u003eGetExternalContentPolicyType();\n",
"lineno": 740,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 557,
"line": "\n",
"lineno": 741,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 558,
"line": "  if (contentPolicyType == nsIContentPolicy::TYPE_DOCUMENT ||\n",
"lineno": 742,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 559,
"line": "      contentPolicyType == nsIContentPolicy::TYPE_SUBDOCUMENT) {\n",
"lineno": 743,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 566,
"line": "    // TYPE_DOCUMENT and TYPE_SUBDOCUMENT loads might potentially\n",
"lineno": 744,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 567,
"line": "    // be wyciwyg:// channels. Let's fix up the URI so we can\n",
"lineno": 745,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 568,
"line": "    // perform proper security checks.\n",
"lineno": 746,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 569,
"line": "    nsCOMPtr\u003cnsIURIFixup\u003e urifixup(do_GetService(NS_URIFIXUP_CONTRACTID, &rv));\n",
"lineno": 747,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 570,
"line": "    if (NS_SUCCEEDED(rv) && urifixup) {\n",
"lineno": 748,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 571,
"line": "      nsCOMPtr\u003cnsIURI\u003e fixedURI;\n",
"lineno": 749,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 572,
"line": "      rv = urifixup-\u003eCreateExposableURI(uri, getter_AddRefs(fixedURI));\n",
"lineno": 750,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 573,
"line": "      if (NS_SUCCEEDED(rv)) {\n",
"lineno": 751,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 574,
"line": "        uri = fixedURI;\n",
"lineno": 752,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 575,
"line": "      }\n",
"lineno": 753,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 576,
"line": "    }\n",
"lineno": 754,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 577,
"line": "  }\n",
"lineno": 755,
"revdate": [1483473570.0, -3600]
}, {
"node": "81f9670a6b33796c1cbc49773d0588820581b5d5",
"author": "Christoph Kerschbaumer \u003cckerschb@christophkerschbaumer.com\u003e",
"desc": "Bug 1182569: Update ContentSecurityManager to handle docshell loads. r=smaug",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 578,
"line": "\n",
"lineno": 756,
"revdate": [1483473570.0, -3600]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 443,
"line": "  // Handle cookie policies\n",
"lineno": 757,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 444,
"line": "  uint32_t cookiePolicy = loadInfo-\u003eGetCookiePolicy();\n",
"lineno": 758,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 445,
"line": "  if (cookiePolicy == nsILoadInfo::SEC_COOKIES_SAME_ORIGIN) {\n",
"lineno": 759,
"revdate": [1449444795.0, 18000]
}, {
"node": "9ae70caf56c04ce2ee4d6d2494b819045781562d",
"author": "Tanvi Vyas \u003ctanvi@mozilla.com\u003e",
"desc": "Bug 1105556 - Don't call CheckLoadURIWithPrincipal() in DoCheckLoadURIChecks() for TYPE_DOCUMENT loads where we don't have a loadingPrincipal. Ensure SEC_COOKIES_SAME_ORIGIN isn't set for TYPE_DOCUMENT loads in CheckChannel(). r=ckerschb, sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 473,
"line": "\n",
"lineno": 760,
"revdate": [1460590228.0, 25200]
}, {
"node": "9ae70caf56c04ce2ee4d6d2494b819045781562d",
"author": "Tanvi Vyas \u003ctanvi@mozilla.com\u003e",
"desc": "Bug 1105556 - Don't call CheckLoadURIWithPrincipal() in DoCheckLoadURIChecks() for TYPE_DOCUMENT loads where we don't have a loadingPrincipal. Ensure SEC_COOKIES_SAME_ORIGIN isn't set for TYPE_DOCUMENT loads in CheckChannel(). r=ckerschb, sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 474,
"line": "    // We shouldn't have the SEC_COOKIES_SAME_ORIGIN flag for top level loads\n",
"lineno": 761,
"revdate": [1460590228.0, 25200]
}, {
"node": "9ae70caf56c04ce2ee4d6d2494b819045781562d",
"author": "Tanvi Vyas \u003ctanvi@mozilla.com\u003e",
"desc": "Bug 1105556 - Don't call CheckLoadURIWithPrincipal() in DoCheckLoadURIChecks() for TYPE_DOCUMENT loads where we don't have a loadingPrincipal. Ensure SEC_COOKIES_SAME_ORIGIN isn't set for TYPE_DOCUMENT loads in CheckChannel(). r=ckerschb, sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 475,
"line": "    MOZ_ASSERT(loadInfo-\u003eGetExternalContentPolicyType() !=\n",
"lineno": 762,
"revdate": [1460590228.0, 25200]
}, {
"node": "9ae70caf56c04ce2ee4d6d2494b819045781562d",
"author": "Tanvi Vyas \u003ctanvi@mozilla.com\u003e",
"desc": "Bug 1105556 - Don't call CheckLoadURIWithPrincipal() in DoCheckLoadURIChecks() for TYPE_DOCUMENT loads where we don't have a loadingPrincipal. Ensure SEC_COOKIES_SAME_ORIGIN isn't set for TYPE_DOCUMENT loads in CheckChannel(). r=ckerschb, sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 476,
"line": "               nsIContentPolicy::TYPE_DOCUMENT);\n",
"lineno": 763,
"revdate": [1460590228.0, 25200]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 446,
"line": "    nsIPrincipal* loadingPrincipal = loadInfo-\u003eLoadingPrincipal();\n",
"lineno": 764,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 447,
"line": "\n",
"lineno": 765,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 448,
"line": "    // It doesn't matter what we pass for the third, data-inherits, argument.\n",
"lineno": 766,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 449,
"line": "    // Any protocol which inherits won't pay attention to cookies anyway.\n",
"lineno": 767,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 450,
"line": "    rv = loadingPrincipal-\u003eCheckMayLoad(uri, false, false);\n",
"lineno": 768,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 451,
"line": "    if (NS_FAILED(rv)) {\n",
"lineno": 769,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 452,
"line": "      AddLoadFlags(aChannel, nsIRequest::LOAD_ANONYMOUS);\n",
"lineno": 770,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 453,
"line": "    }\n",
"lineno": 771,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 454,
"line": "  }\n",
"lineno": 772,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 455,
"line": "  else if (cookiePolicy == nsILoadInfo::SEC_COOKIES_OMIT) {\n",
"lineno": 773,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 456,
"line": "    AddLoadFlags(aChannel, nsIRequest::LOAD_ANONYMOUS);\n",
"lineno": 774,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 457,
"line": "  }\n",
"lineno": 775,
"revdate": [1449444795.0, 18000]
}, {
"node": "7b9b0ce58fbf2acad28fd85a2a0ff8a3978cb7ea",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1216687: Add nsILoadInfo flags for cookie policies. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 458,
"line": "\n",
"lineno": 776,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 435,
"line": "  nsSecurityFlags securityMode = loadInfo-\u003eGetSecurityMode();\n",
"lineno": 777,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 436,
"line": "\n",
"lineno": 778,
"revdate": [1449444795.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 445,
"line": "  // CORS mode is handled by nsCORSListenerProxy\n",
"lineno": 779,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 447,
"line": "  if (securityMode == nsILoadInfo::SEC_REQUIRE_CORS_DATA_INHERITS) {\n",
"lineno": 780,
"revdate": [1449444794.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 439,
"line": "    if (NS_HasBeenCrossOrigin(aChannel)) {\n",
"lineno": 781,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 440,
"line": "      loadInfo-\u003eMaybeIncreaseTainting(LoadTainting::CORS);\n",
"lineno": 782,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 441,
"line": "    }\n",
"lineno": 783,
"revdate": [1449444795.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 448,
"line": "    return NS_OK;\n",
"lineno": 784,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 449,
"line": "  }\n",
"lineno": 785,
"revdate": [1449444794.0, 18000]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 450,
"line": "\n",
"lineno": 786,
"revdate": [1449444794.0, 18000]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 487,
"line": "  // Allow subresource loads if TriggeringPrincipal is the SystemPrincipal.\n",
"lineno": 787,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 488,
"line": "  // For example, allow user stylesheets to load XBL from external files.\n",
"lineno": 788,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 489,
"line": "  if (nsContentUtils::IsSystemPrincipal(loadInfo-\u003eTriggeringPrincipal()) &&\n",
"lineno": 789,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 490,
"line": "      loadInfo-\u003eGetExternalContentPolicyType() != nsIContentPolicy::TYPE_DOCUMENT &&\n",
"lineno": 790,
"revdate": [1458342843.0, 25200]
}, {
"node": "116e62eb5e971dbe1013e912cd20ec00401fa4ee",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1257650 - Skip Security checks if triggeringPrincipal is SystemPrincipal only for subresource loads. r=sicking",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 491,
"line": "      loadInfo-\u003eGetExternalContentPolicyType() != nsIContentPolicy::TYPE_SUBDOCUMENT) {\n",
"lineno": 791,
"revdate": [1458342843.0, 25200]
}, {
"node": "80549d9e752805da90e2c294d6bb68abcccafe38",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1232903 - Skip Security checks if triggeringPrincipal is SystemPrincipal (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 483,
"line": "    return NS_OK;\n",
"lineno": 792,
"revdate": [1456877497.0, 28800]
}, {
"node": "80549d9e752805da90e2c294d6bb68abcccafe38",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1232903 - Skip Security checks if triggeringPrincipal is SystemPrincipal (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 484,
"line": "  }\n",
"lineno": 793,
"revdate": [1456877497.0, 28800]
}, {
"node": "80549d9e752805da90e2c294d6bb68abcccafe38",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1232903 - Skip Security checks if triggeringPrincipal is SystemPrincipal (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 485,
"line": "\n",
"lineno": 794,
"revdate": [1456877497.0, 28800]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 375,
"line": "  // if none of the REQUIRE_SAME_ORIGIN flags are set, then SOP does not apply\n",
"lineno": 795,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 376,
"line": "  if ((securityMode == nsILoadInfo::SEC_REQUIRE_SAME_ORIGIN_DATA_INHERITS) ||\n",
"lineno": 796,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 377,
"line": "      (securityMode == nsILoadInfo::SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED)) {\n",
"lineno": 797,
"revdate": [1449329687.0, -3600]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 453,
"line": "    rv = DoSOPChecks(uri, loadInfo, aChannel);\n",
"lineno": 798,
"revdate": [1449444795.0, 18000]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 379,
"line": "    NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 799,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 380,
"line": "  }\n",
"lineno": 800,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 381,
"line": "\n",
"lineno": 801,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 388,
"line": "  if ((securityMode == nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS) ||\n",
"lineno": 802,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 389,
"line": "      (securityMode == nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL)) {\n",
"lineno": 803,
"revdate": [1449329687.0, -3600]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 459,
"line": "    if (NS_HasBeenCrossOrigin(aChannel)) {\n",
"lineno": 804,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 460,
"line": "      loadInfo-\u003eMaybeIncreaseTainting(LoadTainting::Opaque);\n",
"lineno": 805,
"revdate": [1449444795.0, 18000]
}, {
"node": "989bbde310f5d1cdc5bbdde44340ceb06f87e003",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 461,
"line": "    }\n",
"lineno": 806,
"revdate": [1449444795.0, 18000]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 390,
"line": "    // Please note that DoCheckLoadURIChecks should only be enforced for\n",
"lineno": 807,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 391,
"line": "    // cross origin requests. If the flag SEC_REQUIRE_CORS_DATA_INHERITS is set\n",
"lineno": 808,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 392,
"line": "    // within the loadInfo, then then CheckLoadURIWithPrincipal is performed\n",
"lineno": 809,
"revdate": [1449329687.0, -3600]
}, {
"node": "e648ed99a3a2c93261b8b18647ca445f2e7f869b",
"author": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"desc": "Backed out changeset 09d64535bcda (bug 1216687), a7f1a289dd78, 4dbf06183e6c, 26318a5e3006, 9ae2af3cf86d (bug 1226909) for M(1,2,5) oranges. r=backout",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 393,
"line": "    // within nsCorsListenerProxy\n",
"lineno": 810,
"revdate": [1449329687.0, -3600]
}, {
"node": "e772b5154e0cc25c61307f812d5185296430a07e",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 469,
"line": "    rv = DoCheckLoadURIChecks(uri, loadInfo);\n",
"lineno": 811,
"revdate": [1449444794.0, 18000]
}, {
"node": "9ae2af3cf86d7df085146971d1e55a9b13fe4c9c",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 368,
"line": "    NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 812,
"revdate": [1449308780.0, 28800]
}, {
"node": "8feacdbd43fa5756246fa62f9b27c36727a53ce6",
"author": "Yoshi Huang \u003callstars.chh@mozilla.com\u003e",
"desc": "Bug 1267075 - Part 1: call SetBlockedRequest when CSP check failed. r=bz\n\nAs a follow-up from bug 1206961, we will remove calling CanLoadImage in\nthis bug. Also in the case of CSP check failed, we will call\nSetBlockedRequest in those cases.\n\nSee https://bugzilla.mozilla.org/show_bug.cgi?id=1267075#c30 for the\nanalysis between the old and new setup.\n",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 630,
"line": "    // TODO: Bug 1371237\n",
"lineno": 813,
"revdate": [1486093747.0, -28800]
}, {
"node": "8feacdbd43fa5756246fa62f9b27c36727a53ce6",
"author": "Yoshi Huang \u003callstars.chh@mozilla.com\u003e",
"desc": "Bug 1267075 - Part 1: call SetBlockedRequest when CSP check failed. r=bz\n\nAs a follow-up from bug 1206961, we will remove calling CanLoadImage in\nthis bug. Also in the case of CSP check failed, we will call\nSetBlockedRequest in those cases.\n\nSee https://bugzilla.mozilla.org/show_bug.cgi?id=1267075#c30 for the\nanalysis between the old and new setup.\n",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 631,
"line": "    // consider calling SetBlockedRequest in nsContentSecurityManager::CheckChannel\n",
"lineno": 814,
"revdate": [1486093747.0, -28800]
}, {
"node": "9ae2af3cf86d7df085146971d1e55a9b13fe4c9c",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 369,
"line": "  }\n",
"lineno": 815,
"revdate": [1449308780.0, 28800]
}, {
"node": "a7f1a289dd7824cf9bfdd7be92770fe8a1a55b04",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 4: Make AsyncOpen2 set taining information on channels. Use this information in XHR and fetch(). r=bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 361,
"line": "\n",
"lineno": 816,
"revdate": [1449308780.0, 28800]
}, {
"node": "9ae2af3cf86d7df085146971d1e55a9b13fe4c9c",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 388,
"line": "  return NS_OK;\n",
"lineno": 817,
"revdate": [1449308780.0, 28800]
}, {
"node": "9ae2af3cf86d7df085146971d1e55a9b13fe4c9c",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 389,
"line": "}\n",
"lineno": 818,
"revdate": [1449308780.0, 28800]
}, {
"node": "9ae2af3cf86d7df085146971d1e55a9b13fe4c9c",
"author": "Jonas Sicking \u003cjonas@sicking.cc\u003e",
"desc": "Bug 1226909 part 1: Do security checks in a redirect handler rather than when opening the redirected channel. r=ckerschb",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 390,
"line": "\n",
"lineno": 819,
"revdate": [1449308780.0, 28800]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 352,
"line": "// ==== nsIContentSecurityManager implementation =====\n",
"lineno": 820,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 353,
"line": "\n",
"lineno": 821,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 354,
"line": "NS_IMETHODIMP\n",
"lineno": 822,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 355,
"line": "nsContentSecurityManager::PerformSecurityCheck(nsIChannel* aChannel,\n",
"lineno": 823,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 356,
"line": "                                               nsIStreamListener* aStreamListener,\n",
"lineno": 824,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 357,
"line": "                                               nsIStreamListener** outStreamListener)\n",
"lineno": 825,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 358,
"line": "{\n",
"lineno": 826,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 359,
"line": "  nsCOMPtr\u003cnsIStreamListener\u003e inAndOutListener = aStreamListener;\n",
"lineno": 827,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 360,
"line": "  nsresult rv = doContentSecurityCheck(aChannel, inAndOutListener);\n",
"lineno": 828,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 361,
"line": "  NS_ENSURE_SUCCESS(rv, rv);\n",
"lineno": 829,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 362,
"line": "\n",
"lineno": 830,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 363,
"line": "  inAndOutListener.forget(outStreamListener);\n",
"lineno": 831,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 364,
"line": "  return NS_OK;\n",
"lineno": 832,
"revdate": [1442593635.0, 25200]
}, {
"node": "9f7b7ab7dc1f3eaf14e35c2d066600520cc9b842",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1204703 - Make nsContentSecurityManager scriptable (r=sicking)",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 365,
"line": "}\n",
"lineno": 833,
"revdate": [1442593635.0, 25200]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 408,
"line": "\n",
"lineno": 834,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 409,
"line": "NS_IMETHODIMP\n",
"lineno": 835,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 547,
"line": "nsContentSecurityManager::IsOriginPotentiallyTrustworthy(nsIPrincipal* aPrincipal,\n",
"lineno": 836,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 548,
"line": "                                                         bool* aIsTrustWorthy)\n",
"lineno": 837,
"revdate": [1461666643.0, -3600]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 411,
"line": "{\n",
"lineno": 838,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 412,
"line": "  MOZ_ASSERT(NS_IsMainThread());\n",
"lineno": 839,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 551,
"line": "  NS_ENSURE_ARG_POINTER(aPrincipal);\n",
"lineno": 840,
"revdate": [1461666643.0, -3600]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 414,
"line": "  NS_ENSURE_ARG_POINTER(aIsTrustWorthy);\n",
"lineno": 841,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 415,
"line": "\n",
"lineno": 842,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 554,
"line": "  if (aPrincipal-\u003eGetIsSystemPrincipal()) {\n",
"lineno": 843,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 555,
"line": "    *aIsTrustWorthy = true;\n",
"lineno": 844,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 556,
"line": "    return NS_OK;\n",
"lineno": 845,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 557,
"line": "  }\n",
"lineno": 846,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 558,
"line": "\n",
"lineno": 847,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 559,
"line": "  // The following implements:\n",
"lineno": 848,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 560,
"line": "  // https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy\n",
"lineno": 849,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 561,
"line": "\n",
"lineno": 850,
"revdate": [1461666643.0, -3600]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 416,
"line": "  *aIsTrustWorthy = false;\n",
"lineno": 851,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 563,
"line": "\n",
"lineno": 852,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 564,
"line": "  if (aPrincipal-\u003eGetIsNullPrincipal()) {\n",
"lineno": 853,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 565,
"line": "    return NS_OK;\n",
"lineno": 854,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 566,
"line": "  }\n",
"lineno": 855,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 567,
"line": "\n",
"lineno": 856,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 568,
"line": "  MOZ_ASSERT(aPrincipal-\u003eGetIsCodebasePrincipal(),\n",
"lineno": 857,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 569,
"line": "             \"Nobody is expected to call us with an nsIExpandedPrincipal\");\n",
"lineno": 858,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 570,
"line": "\n",
"lineno": 859,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 571,
"line": "  nsCOMPtr\u003cnsIURI\u003e uri;\n",
"lineno": 860,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 572,
"line": "  aPrincipal-\u003eGetURI(getter_AddRefs(uri));\n",
"lineno": 861,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 573,
"line": "\n",
"lineno": 862,
"revdate": [1461666643.0, -3600]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 417,
"line": "  nsAutoCString scheme;\n",
"lineno": 863,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 575,
"line": "  nsresult rv = uri-\u003eGetScheme(scheme);\n",
"lineno": 864,
"revdate": [1461666643.0, -3600]
}, {
"node": "aff31c38715020c8fb3c878bee84a5fa0c3e4cec",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1226324 - Do not use NS_ENSURCE_SUCCESS(rv, NS_OK) within nsContentSecurityManager. r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 424,
"line": "  if (NS_FAILED(rv)) {\n",
"lineno": 865,
"revdate": [1447971777.0, 28800]
}, {
"node": "aff31c38715020c8fb3c878bee84a5fa0c3e4cec",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1226324 - Do not use NS_ENSURCE_SUCCESS(rv, NS_OK) within nsContentSecurityManager. r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 425,
"line": "    return NS_OK;\n",
"lineno": 866,
"revdate": [1447971777.0, 28800]
}, {
"node": "aff31c38715020c8fb3c878bee84a5fa0c3e4cec",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1226324 - Do not use NS_ENSURCE_SUCCESS(rv, NS_OK) within nsContentSecurityManager. r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 426,
"line": "  }\n",
"lineno": 867,
"revdate": [1447971777.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 420,
"line": "\n",
"lineno": 868,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 580,
"line": "  // Blobs are expected to inherit their principal so we don't expect to have\n",
"lineno": 869,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 581,
"line": "  // a codebase principal with scheme 'blob' here.  We can't assert that though\n",
"lineno": 870,
"revdate": [1461666643.0, -3600]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 582,
"line": "  // since someone could mess with a non-blob URI to give it that scheme.\n",
"lineno": 871,
"revdate": [1461666643.0, -3600]
}, {
"node": "93657f8dedaafa384bcd49c71b52e195ec968de8",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1299727 - Rename NS_WARN_IF_FALSE as NS_WARNING_ASSERTION. r=erahm.\n\nThe new name makes the sense of the condition much clearer. E.g. compare:\n\n  NS_WARN_IF_FALSE(!rv.Failed());\n\nwith:\n\n  NS_WARNING_ASSERTION(!rv.Failed());\n\nThe new name also makes it clearer that it only has effect in debug builds,\nbecause that's standard for assertions.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 634,
"line": "  NS_WARNING_ASSERTION(!scheme.EqualsLiteral(\"blob\"),\n",
"lineno": 872,
"revdate": [1472706076.0, -36000]
}, {
"node": "93657f8dedaafa384bcd49c71b52e195ec968de8",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1299727 - Rename NS_WARN_IF_FALSE as NS_WARNING_ASSERTION. r=erahm.\n\nThe new name makes the sense of the condition much clearer. E.g. compare:\n\n  NS_WARN_IF_FALSE(!rv.Failed());\n\nwith:\n\n  NS_WARNING_ASSERTION(!rv.Failed());\n\nThe new name also makes it clearer that it only has effect in debug builds,\nbecause that's standard for assertions.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 635,
"line": "                       \"IsOriginPotentiallyTrustworthy ignoring blob scheme\");\n",
"lineno": 873,
"revdate": [1472706076.0, -36000]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 585,
"line": "\n",
"lineno": 874,
"revdate": [1461666643.0, -3600]
}, {
"node": "041549a67f0991866abedcb829524660591ab2e2",
"author": "Paolo Amadini \u003cpaolo.mozmail@amadzone.org\u003e",
"desc": "Bug 1217766 - All PDFs trigger the insecure password warning. r=MattN,bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 521,
"line": "  // According to the specification, the user agent may choose to extend the\n",
"lineno": 875,
"revdate": [1453128858.0, 0]
}, {
"node": "041549a67f0991866abedcb829524660591ab2e2",
"author": "Paolo Amadini \u003cpaolo.mozmail@amadzone.org\u003e",
"desc": "Bug 1217766 - All PDFs trigger the insecure password warning. r=MattN,bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 522,
"line": "  // trust to other, vendor-specific URL schemes. We use this for \"resource:\",\n",
"lineno": 876,
"revdate": [1453128858.0, 0]
}, {
"node": "041549a67f0991866abedcb829524660591ab2e2",
"author": "Paolo Amadini \u003cpaolo.mozmail@amadzone.org\u003e",
"desc": "Bug 1217766 - All PDFs trigger the insecure password warning. r=MattN,bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 523,
"line": "  // which is technically a substituting protocol handler that is not limited to\n",
"lineno": 877,
"revdate": [1453128858.0, 0]
}, {
"node": "041549a67f0991866abedcb829524660591ab2e2",
"author": "Paolo Amadini \u003cpaolo.mozmail@amadzone.org\u003e",
"desc": "Bug 1217766 - All PDFs trigger the insecure password warning. r=MattN,bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 524,
"line": "  // local resource mapping, but in practice is never mapped remotely as this\n",
"lineno": 878,
"revdate": [1453128858.0, 0]
}, {
"node": "041549a67f0991866abedcb829524660591ab2e2",
"author": "Paolo Amadini \u003cpaolo.mozmail@amadzone.org\u003e",
"desc": "Bug 1217766 - All PDFs trigger the insecure password warning. r=MattN,bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 525,
"line": "  // would violate assumptions a lot of code makes.\n",
"lineno": 879,
"revdate": [1453128858.0, 0]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 421,
"line": "  if (scheme.EqualsLiteral(\"https\") ||\n",
"lineno": 880,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 422,
"line": "      scheme.EqualsLiteral(\"file\") ||\n",
"lineno": 881,
"revdate": [1446837017.0, 28800]
}, {
"node": "041549a67f0991866abedcb829524660591ab2e2",
"author": "Paolo Amadini \u003cpaolo.mozmail@amadzone.org\u003e",
"desc": "Bug 1217766 - All PDFs trigger the insecure password warning. r=MattN,bz",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 528,
"line": "      scheme.EqualsLiteral(\"resource\") ||\n",
"lineno": 882,
"revdate": [1453128858.0, 0]
}, {
"node": "f793597159bc98cd5507f6d1ae728c6c9fdad5e1",
"author": "Kit Cambridge \u003ckcambridge@mozilla.com\u003e",
"desc": "Bug 1223481 - Use the \"potentially trustworthy origin\" helper to validate Push server URLs. r=dragana",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 428,
"line": "      scheme.EqualsLiteral(\"app\") ||\n",
"lineno": 883,
"revdate": [1447181446.0, 28800]
}, {
"node": "82e3f2a1196a227ce83ae8e0d53d5c2b273205a5",
"author": "Johann Hofmann \u003cjhofmann@mozilla.com\u003e",
"desc": "Bug 1277524 - Add moz-extension to the list of potentially trustworthy origins. r=tanvi\n\nMozReview-Commit-ID: BvR7Xb0AE9N",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 648,
"line": "      scheme.EqualsLiteral(\"moz-extension\") ||\n",
"lineno": 884,
"revdate": [1464880467.0, -7200]
}, {
"node": "f793597159bc98cd5507f6d1ae728c6c9fdad5e1",
"author": "Kit Cambridge \u003ckcambridge@mozilla.com\u003e",
"desc": "Bug 1223481 - Use the \"potentially trustworthy origin\" helper to validate Push server URLs. r=dragana",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 429,
"line": "      scheme.EqualsLiteral(\"wss\")) {\n",
"lineno": 885,
"revdate": [1447181446.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 424,
"line": "    *aIsTrustWorthy = true;\n",
"lineno": 886,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 425,
"line": "    return NS_OK;\n",
"lineno": 887,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 426,
"line": "  }\n",
"lineno": 888,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 427,
"line": "\n",
"lineno": 889,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 428,
"line": "  nsAutoCString host;\n",
"lineno": 890,
"revdate": [1446837017.0, 28800]
}, {
"node": "915ddad130871308f16b78b8820ed6bff2f23f64",
"author": "Jonathan Watt \u003cjwatt@jwatt.org\u003e",
"desc": "Bug 1267509 - Make nsContentSecurityManager::IsURIPotentiallyTrustworthy act on an nsIPrincipal. r=bz\n\nMozReview-Commit-ID: Zu1zU4Brkx",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 601,
"line": "  rv = uri-\u003eGetHost(host);\n",
"lineno": 891,
"revdate": [1461666643.0, -3600]
}, {
"node": "aff31c38715020c8fb3c878bee84a5fa0c3e4cec",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1226324 - Do not use NS_ENSURCE_SUCCESS(rv, NS_OK) within nsContentSecurityManager. r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 438,
"line": "  if (NS_FAILED(rv)) {\n",
"lineno": 892,
"revdate": [1447971777.0, 28800]
}, {
"node": "aff31c38715020c8fb3c878bee84a5fa0c3e4cec",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1226324 - Do not use NS_ENSURCE_SUCCESS(rv, NS_OK) within nsContentSecurityManager. r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 439,
"line": "    return NS_OK;\n",
"lineno": 893,
"revdate": [1447971777.0, 28800]
}, {
"node": "aff31c38715020c8fb3c878bee84a5fa0c3e4cec",
"author": "Christoph Kerschbaumer \u003cmozilla@christophkerschbaumer.com\u003e",
"desc": "Bug 1226324 - Do not use NS_ENSURCE_SUCCESS(rv, NS_OK) within nsContentSecurityManager. r=tanvi",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 440,
"line": "  }\n",
"lineno": 894,
"revdate": [1447971777.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 431,
"line": "\n",
"lineno": 895,
"revdate": [1446837017.0, 28800]
}, {
"node": "245dfda695c252ecb702d85f5c49e2bf4be9e985",
"author": "Chris Peterson \u003ccpeterson@mozilla.com\u003e",
"desc": "Bug 870698 - Part 4: Replace Equals(\"\") with EqualsLiteral(\"\"). r=erahm\n\nMozReview-Commit-ID: G1GhyvD29WK",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 811,
"line": "  if (host.EqualsLiteral(\"127.0.0.1\") ||\n",
"lineno": 896,
"revdate": [1504685625.0, 25200]
}, {
"node": "245dfda695c252ecb702d85f5c49e2bf4be9e985",
"author": "Chris Peterson \u003ccpeterson@mozilla.com\u003e",
"desc": "Bug 870698 - Part 4: Replace Equals(\"\") with EqualsLiteral(\"\"). r=erahm\n\nMozReview-Commit-ID: G1GhyvD29WK",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 812,
"line": "      host.EqualsLiteral(\"localhost\") ||\n",
"lineno": 897,
"revdate": [1504685625.0, 25200]
}, {
"node": "245dfda695c252ecb702d85f5c49e2bf4be9e985",
"author": "Chris Peterson \u003ccpeterson@mozilla.com\u003e",
"desc": "Bug 870698 - Part 4: Replace Equals(\"\") with EqualsLiteral(\"\"). r=erahm\n\nMozReview-Commit-ID: G1GhyvD29WK",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 813,
"line": "      host.EqualsLiteral(\"::1\")) {\n",
"lineno": 898,
"revdate": [1504685625.0, 25200]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 435,
"line": "    *aIsTrustWorthy = true;\n",
"lineno": 899,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 436,
"line": "    return NS_OK;\n",
"lineno": 900,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 437,
"line": "  }\n",
"lineno": 901,
"revdate": [1446837017.0, 28800]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 674,
"line": "\n",
"lineno": 902,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 675,
"line": "  // If a host is not considered secure according to the default algorithm, then\n",
"lineno": 903,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 676,
"line": "  // check to see if it has been whitelisted by the user.  We only apply this\n",
"lineno": 904,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 677,
"line": "  // whitelist for network resources, i.e., those with scheme \"http\" or \"ws\".\n",
"lineno": 905,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 678,
"line": "  // The pref should contain a comma-separated list of hostnames.\n",
"lineno": 906,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 679,
"line": "  if (scheme.EqualsLiteral(\"http\") || scheme.EqualsLiteral(\"ws\")) {\n",
"lineno": 907,
"revdate": [1476113544.0, 14400]
}, {
"node": "2b347fb55a9965acec727f6e40671ba859636603",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1384835 (part 3, attempt 2) - Remove the Preferences::Get*CString() variants that return nsAdoptingCString. r=froydnj.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 717,
"line": "    nsAutoCString whitelist;\n",
"lineno": 908,
"revdate": [1501475328.0, -36000]
}, {
"node": "2b347fb55a9965acec727f6e40671ba859636603",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1384835 (part 3, attempt 2) - Remove the Preferences::Get*CString() variants that return nsAdoptingCString. r=froydnj.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 718,
"line": "    nsresult rv =\n",
"lineno": 909,
"revdate": [1501475328.0, -36000]
}, {
"node": "2b347fb55a9965acec727f6e40671ba859636603",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1384835 (part 3, attempt 2) - Remove the Preferences::Get*CString() variants that return nsAdoptingCString. r=froydnj.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 719,
"line": "      Preferences::GetCString(\"dom.securecontext.whitelist\", whitelist);\n",
"lineno": 910,
"revdate": [1501475328.0, -36000]
}, {
"node": "2b347fb55a9965acec727f6e40671ba859636603",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1384835 (part 3, attempt 2) - Remove the Preferences::Get*CString() variants that return nsAdoptingCString. r=froydnj.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 720,
"line": "    if (NS_SUCCEEDED(rv)) {\n",
"lineno": 911,
"revdate": [1501475328.0, -36000]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 682,
"line": "      nsCCharSeparatedTokenizer tokenizer(whitelist, ',');\n",
"lineno": 912,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 683,
"line": "      while (tokenizer.hasMoreTokens()) {\n",
"lineno": 913,
"revdate": [1476113544.0, 14400]
}, {
"node": "6352096eb0de303cba9440092279e4254a1ec586",
"author": "Nicholas Nethercote \u003cnnethercote@mozilla.com\u003e",
"desc": "Bug 1374580 (part 3) - Remove ns{,C}Substring typedefs. r=froydnj.\n\nAll the instances are converted as follows.\n\n- nsSubstring  --\u003e nsAString\n- nsCSubstring --\u003e nsACString",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 729,
"line": "        const nsACString& allowedHost = tokenizer.nextToken();\n",
"lineno": 914,
"revdate": [1497950392.0, -36000]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 685,
"line": "        if (host.Equals(allowedHost)) {\n",
"lineno": 915,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 686,
"line": "          *aIsTrustWorthy = true;\n",
"lineno": 916,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 687,
"line": "          return NS_OK;\n",
"lineno": 917,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 688,
"line": "        }\n",
"lineno": 918,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 689,
"line": "      }\n",
"lineno": 919,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 690,
"line": "    }\n",
"lineno": 920,
"revdate": [1476113544.0, 14400]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 883,
"line": "    // Maybe we have a .onion URL. Treat it as whitelisted as well if\n",
"lineno": 921,
"revdate": [1519893870.0, -3600]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 884,
"line": "    // `dom.securecontext.whitelist_onions` is `true`.\n",
"lineno": 922,
"revdate": [1519893870.0, -3600]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 885,
"line": "    if (nsMixedContentBlocker::IsPotentiallyTrustworthyOnion(uri)) {\n",
"lineno": 923,
"revdate": [1519893870.0, -3600]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 886,
"line": "      *aIsTrustWorthy = true;\n",
"lineno": 924,
"revdate": [1519893870.0, -3600]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 887,
"line": "      return NS_OK;\n",
"lineno": 925,
"revdate": [1519893870.0, -3600]
}, {
"node": "1c3f6b9e4bf7de6f8abab900634e6ea59a14c9b3",
"author": "Georg Koppen \u003cgk@torproject.org\u003e",
"desc": "Bug 1382359: Treat .onion as a secure context\n\nWebsites which collect passwords but don't use HTTPS start showing scary\nwarnings from Firefox 51 onwards and mixed context blocking has been\navailable even longer.\n\n.onion sites without HTTPS support are affected as well, although their\ntraffic is encrypted and authenticated. This patch addresses this\nshortcoming by making sure .onion sites are treated as potentially\ntrustworthy origins.\n\nThe secure context specification\n(https://w3c.github.io/webappsec-secure-contexts/) is pretty much focused\non tying security and trustworthiness to the protocol over which domains\nare accessed. However, it is not obvious why .onion sites should not be\ntreated as potentially trustworthy given:\n\n\"A potentially trustworthy origin is one which a user agent can\ngenerally trust as delivering data securely.\n\nThis algorithms [sic] considers certain hosts, scheme, and origins as\npotentially trustworthy, even though they might not be authenticated and\nencrypted in the traditional sense.\"\n(https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy)\n\nWe use step 8 in the algorithm to establish trustworthiness of .onion\nsites by whitelisting them given the encrypted and authenticated nature\nof their traffic.",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 888,
"line": "    }\n",
"lineno": 926,
"revdate": [1519893870.0, -3600]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 691,
"line": "  }\n",
"lineno": 927,
"revdate": [1476113544.0, 14400]
}, {
"node": "cfb9de0c9f2af044c256bfbcfff8a9925224966c",
"author": "Richard Barnes \u003crbarnes@mozilla.com\u003e",
"desc": "Bug 1308951 - Add a pref to whitelist specific domains as SecureContexts r=ckerschb,jcj\n\nMozReview-Commit-ID: AxihCLsBNRw",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 692,
"line": "\n",
"lineno": 928,
"revdate": [1476113544.0, 14400]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 439,
"line": "  return NS_OK;\n",
"lineno": 929,
"revdate": [1446837017.0, 28800]
}, {
"node": "a8d97dd72f3c74032c726227fc8a0a4621e75b74",
"author": "Matthew Noorenberghe \u003cmozilla@noorenberghe.ca\u003e",
"desc": "Bug 1221365 - Move \"Is origin potentially trustworthy?\" logic outside ServiceWorkerManager.cpp. r=ckerschb,bkelly",
"abspath": "dom/security/nsContentSecurityManager.cpp",
"targetline": 440,
"line": "}\n",
"lineno": 930,
"revdate": [1446837017.0, 28800]
}]
}